# $Id$
# Copyright (c) 2011 bivio Software, Inc.  All rights reserved.
require './Cookie.PL';
config({
    'Bivio::Delegate::Cookie' => {
	tag => 'TAG4',
	domain => '.bivio.biz',
	prior_tags => [
	    ['TAG1', 'old.bivio.org'],
	    ['TAG2', 'bivio.biz'],
	    'TAG3',
	],
    },
});
my($encrypted);
my($cookies) = [];
req('r')->headers_out()->test_bean_register_callback(
    'add',
    ['Set-Cookie'],
    sub {
	my($args) = @_;
	push(@$cookies, $args->[1]);
	return;
    },
);
req('r')->test_bean_register_callback(
    'hostname',
    [],
    ['bivio.biz'],
);
[
    [req(), req('r')] => [
	header_out => [
	    sub {
		my($case) = @_;
		$case->get('object')->put('val1' => 'hello');
		return [req(), req('r')];
	    } => sub {
		assert_equals(1, scalar(@$cookies));
		b_die($cookies, ': no match')
		    unless $cookies->[0] =~ m{^TAG4=(.+?); path=/; domain=.bivio.biz; expires};
		$encrypted = $1;
		$cookies = [];
		return [1];
	    },
	],
    ],
    sub {
    	req('r')->header_in('Cookie', "TAG1=$encrypted");
    	return class()->new(req(), req('r'));
    } => [
    	header_out => [
    	    [req(), req('r')] => sub {
    		assert_equals(
    		    'hello',
    		    shift->get_nested(qw(object val1)),
    		);
		foreach my $x (
		    [1, 3],
		    [2, 2],
		    [2, 2],
		) {
		    assert_equals($x->[1], scalar(grep(/TAG$x->[0]=;/, @$cookies)));
    		}
		$cookies = [];
    		return [1];
    	    }
    	],
    ],
];

