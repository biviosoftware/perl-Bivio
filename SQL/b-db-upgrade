#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Collection::Attributes;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::Type::DateTime;

#=VARIABLES

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
#TODO: Change this back to "eq 'upgrade'"
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.  Avo
    &{\&{$method}}();

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::SQL::Connection->commit;

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _do(string sql) : statement
#
# Returns the last statement executed.
#
sub _do {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_constraints(string table, string column)
#
# Drop all the constraints on a particular table and column
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do("ALTER TABLE $table drop constraint $c
                /");
    }
    return;
}

# _upgrade()
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {

    use Bivio::Type::EntryClass;
    use Bivio::Type::EntryType;
    use Bivio::Type::TaxCategory;

    # update transaction, INSTRUMENT_DISTRIBUTION_INVESTMENT_FEE is negative
    # and INSTRUMENT_BUY_FEE too
    Bivio::SQL::Connection->execute('
            UPDATE entry_t
            SET amount = -amount
            WHERE entry_t.entry_type in (?, ?)
            AND amount > 0',
	    [
	Bivio::Type::EntryType::INSTRUMENT_DISTRIBUTION_INVESTMENT_FEE->as_int,
		Bivio::Type::EntryType::INSTRUMENT_BUY_FEE->as_int,
	    ]);

    # remove spurious instrument dividend for foreign taxes
    Bivio::SQL::Connection->execute('
            DELETE FROM realm_instrument_entry_t
            WHERE entry_id IN (
                SELECT a.entry_id
                FROM entry_t a, entry_t b, realm_transaction_t
                WHERE a.realm_transaction_id
                    = realm_transaction_t.realm_transaction_id
                AND a.realm_transaction_id=b.realm_transaction_id
                AND a.tax_category=?
                AND b.tax_category=?
                AND realm_transaction_t.source_class=?)',
	    [
		    Bivio::Type::TaxCategory::DIVIDEND->as_int,
		    Bivio::Type::TaxCategory::FOREIGN_TAX->as_int,
		    Bivio::Type::EntryClass::INSTRUMENT->as_int,
	    ]);
    Bivio::SQL::Connection->execute('
            DELETE FROM entry_t
            WHERE entry_id IN (
                SELECT a.entry_id
                FROM entry_t a, entry_t b, realm_transaction_t
                WHERE a.realm_transaction_id
                    = realm_transaction_t.realm_transaction_id
                AND a.realm_transaction_id=b.realm_transaction_id
                AND a.tax_category=?
                AND b.tax_category=?
                AND realm_transaction_t.source_class=?)',
	    [
		    Bivio::Type::TaxCategory::DIVIDEND->as_int,
		    Bivio::Type::TaxCategory::FOREIGN_TAX->as_int,
		    Bivio::Type::EntryClass::INSTRUMENT->as_int,
	    ]);

    _upgrade_files();
    return;
}

# _upgrade_files()
#
#
#
sub _upgrade_files {
    use Bivio::Biz::Model::RealmAdminList;
    use Bivio::Biz::Model::RealmOwner;

    my($sth) = _do('select realm_id, file_id, name from file_t
		/');
    my(@files);
    my(%realms);
    while (my $row = $sth->fetchrow_arrayref()) {
	next unless $row->[2] =~ s![\\/:*?"<>|]!-!g;
	push(@files, {
	    file_id => $row->[1],
	    name => $row->[2],
	});
	$realms{$row->[0]}++;
    }
    $sth->finish;

    foreach my $file (@files) {
	my($name) = $file->{name};
	print STDERR $file->{name}, "\n";
	$sth = Bivio::SQL::Connection->execute('
            UPDATE file_t
            SET name = ?
            WHERE file_id = ?', [$file->{name}, $file->{file_id}]);
    }

    my($admins) = Bivio::Biz::Model::RealmAdminList->new();
    my($realm) = Bivio::Biz::Model::RealmOwner->new();
    foreach my $realm_id (keys(%realms)) {
	$realm->unauth_load_or_die(realm_id => $realm_id);
	$admins->unauth_load_all({auth_id => $realm_id});
	print join(' ', $realms{$realm_id}, $realm_id,
		$realm->get('name'), $admins->get_outgoing_emails());
    }
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
