#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Auth::Realm;
use Bivio::Auth::RealmType;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::RealmOwner;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::ShellUtil;
use Bivio::Type::Date;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.
    &{\&{$method}}($req);

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::Agent::Task->commit($req);

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table set $column = $value
/");

    return;
}

# _disclaimer(string user) : string
#
# Returns a disclaimer for a particular person.
#
sub _disclaimer {
    my($celeb) = @_;
    return <<"EOF";
Disclaimer: statements are opinions expressed by $celeb.
These statements are not intended to replace professional
advice. When in doubt, follow the advice of your investment, tax or
legal advisors who are familiar with your particular circumstances.
EOF
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _init_realm_role(Bivio::Biz::Util::RealmRole rru, string perms)
#
# Accepts a configuration like in Biz::Util::RealmRole and sets for
# a particular club.
#
sub _init_realm_role {
    my($rru, $perms) = @_;
    $perms =~ s/\\//g;
    $perms =~ s/^.*b-realm-role.* edit /!/mg;
    foreach my $edit (split(/!/, $perms)) {
	next unless $edit;
	$rru->edit(split(' ', $edit));
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _sqlplus(string db_login, string actions) : string_ref
#
# Runs I<actions> in sqlplus with I<db_login>.
# Returns result of the execution.
#
# I<actions> will have a semicolon (;) appended to it.
#
# If any of I<actions> fails, will rollback and exit.
#
sub _sqlplus {
    my($db_login, $actions) = @_;
    my($res) = Bivio::ShellUtil::piped_exec(undef, 'su - oracle -c sqlplus',
            <<"EOF");
$db_login
set linesize 10000
set pagesize 10000
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit sql.sqlcode rollback
$actions;
disconnect
exit
EOF
    return $res;
}

# _upgrade(Bivio::Agent::Request req)
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {
    my($req) = @_;

    _upgrade_celeb();
    _upgrade_perms();
    print("\n*** done ***\n");
    return;
}

# _upgrade_celeb()
#
# Add take stock and club cafe.
#
sub _upgrade_celeb {
    print("upgrading club_cafe, take_stock, and ask_candis\n");
    use Bivio::Agent::HTTP::Location;
    my($root) = Bivio::Agent::HTTP::Location->get_document_root;
    use Bivio::Biz::Util::File;
    my($file) = Bivio::Biz::Util::File->new(['-r', 'take_stock',
	    '-i', $root.'i/ellis_traub.jpg']);
    my($req) = $file->get_request;
    my($fm) = Bivio::Biz::Model::File->new($req);
    my($fv) = Bivio::Type::FileVolume::FILE();
    $fm->delete if $fm->unsafe_load({
	directory_id => $fv->get_root_directory_id($req->get('auth_id')),
	volume => $fv,
	name => 'ellis_traub.jpg',
    });
    $file->create('ellis_traub.jpg', '', 'public');
    my($decor) = Bivio::Biz::Model->new($req, 'RealmDecor');
    $decor->delete if $decor->unsafe_load;
    $decor->create({
	realm_id => $req->get('auth_id'),
	show_all_columns => 0,
	show_disclaimer => 1,
	show_profile => 1,
	disclaimer => _disclaimer('Ellis Traub'),
	portrait_filename => 'ellis_traub.jpg',
	profile_title => 'Ellis Traub',
	profile_bio => <<'EOF',
Ellis Traub has a mission to help you discover how easy it is to produce
as good a portfolio as your professional friends - or better.
<p>
Father of Technamental Analysis, author of the book "Take Stock" and
chairman of <a href="/goto?x=http://www.investware.com">InvestWare</a>,
Ellis Traub is also well known as the creator of NAIC's official
software, the Investor's Toolkit.  He believes that the things you
have to know about companies are few and easy to understand.  In
his words, "my qualifications are simply that I've been there and done that."
<p>
Ellis' columns:
<p>
<a href="/hm/take-stock.html">Worthy Mission and Some Staunch Allies</a>
<p>
<a href="/hm/take-stock-010331.html">There's No Time Like the Present.
Let the Good Times Roll!</a>
EOF
    });

    $file = Bivio::Biz::Util::File->new(['-r', 'club_cafe',
	    '-i', $root.'i/club_cafe.jpg']);
    $req = $file->get_request;
    $fm = Bivio::Biz::Model::File->new($req);
    $fm->delete if $fm->unsafe_load({
	directory_id => $fv->get_root_directory_id($req->get('auth_id')),
	volume => $fv,
	name => 'club_cafe.jpg',
    });
    $file->create('club_cafe.jpg', '', 'public');
    $decor = Bivio::Biz::Model->new($req, 'RealmDecor');
    $decor->delete if $decor->unsafe_load;
    $decor->create({
	realm_id => $req->get('auth_id'),
	show_all_columns => 0,
	show_disclaimer => 1,
	show_profile => 1,
	disclaimer => _disclaimer('bivio users or representatives'),
	portrait_filename => 'club_cafe.jpg',
	profile_title => 'Club Cafe',
	profile_bio => <<'EOF',
Relax, sit down, and have a cappuccino.
<p>
Use this discussion board to chat with members of the bivio club
community.  You'll find quite a few bivions listening - old-timers and
novices alike.
<p>
Have a specific question, or looking for something?  Use the search box
at the top to find previous posts.  You can also contact bivio customer
support at <a href="/pub/mail-support">support@bivio.com</a>.
EOF
    });
    $req->set_club_pref('MAIL_ALLOW_ATTACHMENTS', 0);
    $req->set_club_pref('MAIL_POST_PUBLIC', 1);

    $req->set_realm('ask_candis');
    $decor->update({disclaimer => _disclaimer('Candis King')})
	    if $decor->unsafe_load;

    return;
}

# _upgrade_perms()
#
# Update permissions.
#
sub _upgrade_perms {
    use Bivio::Biz::Util::RealmRole;
    my($rru) = Bivio::Biz::Util::RealmRole->new();
    my($req) = $rru->get_request;

    print("Upgrading permissions\n");
    # For non-public clubs, turn off mail_forward
    my($rr) = Bivio::Biz::Model::RealmRole->new($req);
    my($it) = $rr->unauth_iterate_start('realm_id, role');
    while ($rr->iterate_next_and_load($it)) {
	# Skip general, user, club
	next if $rr->get('realm_id') <= 3;
	my($role) = $rr->get('role');
	my($s) = $rr->get('permission_set');
	my($read) = Bivio::Auth::PermissionSet
		->is_set(\$s, Bivio::Auth::Permission::MAIL_READ());
	my($got_one) = 0;
	if (Bivio::Auth::PermissionSet
		->is_set(\$s, Bivio::Auth::Permission::NOT_IN_USE_1())) {
	    Bivio::Auth::PermissionSet
			->clear(\$s, Bivio::Auth::Permission::NOT_IN_USE_1());
	    $got_one++;
	}
	if (!$read || $role == Bivio::Auth::Role::ANONYMOUS()) {
	    # Clear forward if read isn't set.  Never allow forwarding
	    # for anonymous users
	    Bivio::Auth::PermissionSet
			->clear(\$s, Bivio::Auth::Permission::MAIL_FORWARD());
	    $got_one++;
	}
	if (!$read) {
	    Bivio::Auth::PermissionSet
			->clear(\$s, Bivio::Auth::Permission::MAIL_POST());
	    $got_one++;
	}
	next unless $got_one;
	$rr->update({permission_set => $s});
# There are 1708 entries, this is going to be a long list.
#	print('Fixed: ', $rr->get('realm_id'), "\n");
    }
    $rr->iterate_end($it);

    $req->set_realm('general');
    _init_realm_role($rru, <<'EOF');
b-realm-role -r GENERAL edit ANONYMOUS - \
    +DOCUMENT_READ \
    +LOGIN \
    +MAIL_WRITE
b-realm-role -r GENERAL edit USER - \
    +ANONYMOUS \
    +ANY_USER
b-realm-role -r GENERAL edit WITHDRAWN - \
    +USER
b-realm-role -r GENERAL edit GUEST - \
    +WITHDRAWN \
    +ANY_REALM_USER
b-realm-role -r GENERAL edit MEMBER - \
    +GUEST
b-realm-role -r GENERAL edit ACCOUNTANT - \
    +MEMBER
b-realm-role -r GENERAL edit ADMINISTRATOR - \
    +ACCOUNTANT \
    +ACCOUNTING_READ \
    +ACCOUNTING_WRITE \
    +ACCOUNT_READ \
    +ADMIN_READ \
    +ADMIN_WRITE \
    +DEBUG_ACTION \
    +DOCUMENT_WRITE \
    +FILE_ADMIN \
    +INVESTMENT_READ \
    +MAIL_ADMIN \
    +MAIL_FORWARD \
    +MAIL_POST \
    +MAIL_READ \
    +MAIL_RECEIVE \
    +MEMBER_READ \
    +MEMBER_WRITE \
    +MOTION_READ \
    +MOTION_WRITE \
    +REALM_PUBLICIZE \
    +UNKNOWN
EOF

    $req->set_realm('user');
    _init_realm_role($rru, <<'EOF');
b-realm-role -r user edit ANONYMOUS - \
    +LOGIN \
    +MAIL_WRITE
b-realm-role -r user edit USER - \
    +ANONYMOUS \
    +ANY_USER
b-realm-role -r user edit WITHDRAWN - \
    +USER
b-realm-role -r user edit GUEST - \
    +WITHDRAWN \
    +ANY_REALM_USER \
    +DOCUMENT_READ
b-realm-role -r user edit MEMBER - \
    +GUEST
b-realm-role -r user edit ACCOUNTANT - \
    +MEMBER
b-realm-role -r user edit ADMINISTRATOR - \
    +ACCOUNTANT \
    +ACCOUNTING_READ \
    +ACCOUNTING_WRITE \
    +ACCOUNT_READ \
    +ADMIN_READ \
    +ADMIN_WRITE \
    +DEBUG_ACTION \
    +DOCUMENT_WRITE \
    +FILE_ADMIN \
    +INVESTMENT_READ \
    +MAIL_ADMIN \
    +MAIL_FORWARD \
    +MAIL_POST \
    +MAIL_READ \
    +MAIL_RECEIVE \
    +MEMBER_READ \
    +MEMBER_WRITE \
    +MOTION_READ \
    +MOTION_WRITE \
    +REALM_PUBLICIZE \
    +UNKNOWN
EOF

    # CLUB
    $req->set_realm('club');
    _init_realm_role($rru, <<'EOF');
b-realm-role -r club edit ANONYMOUS - \
    +LOGIN \
    +MAIL_WRITE
b-realm-role -r club edit USER - \
    +ANONYMOUS \
    +ANY_USER
b-realm-role -r club edit WITHDRAWN - \
    +USER
b-realm-role -r club edit GUEST - \
    +WITHDRAWN \
    +ACCOUNTING_READ \
    +ACCOUNT_READ \
    +ADMIN_READ \
    +ANY_REALM_USER \
    +DOCUMENT_READ \
    +INVESTMENT_READ \
    +MAIL_FORWARD \
    +MAIL_POST \
    +MAIL_READ \
    +MEMBER_READ \
    +MOTION_READ
b-realm-role -r club edit MEMBER - \
    +GUEST \
    +DOCUMENT_WRITE \
    +MAIL_RECEIVE
b-realm-role -r club edit ACCOUNTANT - \
    +MEMBER \
    +ACCOUNTING_WRITE \
    +ADMIN_WRITE \
    +DEBUG_ACTION \
    +FILE_ADMIN \
    +MAIL_ADMIN \
    +MEMBER_WRITE \
    +MOTION_WRITE \
    +REALM_PUBLICIZE \
    +UNKNOWN
b-realm-role -r club edit ADMINISTRATOR - \
    +ACCOUNTANT
EOF

    $req->set_realm('demo_club');
    _init_realm_role($rru, <<'EOF');
b-realm-role -r demo_club edit ANONYMOUS - \
    +ACCOUNTING_READ \
    +ACCOUNT_READ \
    +ADMIN_READ \
    +ANY_REALM_USER \
    +ANY_USER \
    +DOCUMENT_READ \
    +INVESTMENT_READ \
    +LOGIN \
    +MAIL_READ \
    +MEMBER_READ \
    +MOTION_READ
b-realm-role -r demo_club edit USER - \
    +ANONYMOUS
b-realm-role -r demo_club edit WITHDRAWN - \
    +USER \
b-realm-role -r demo_club edit GUEST - \
    +WITHDRAWN
b-realm-role -r demo_club edit MEMBER - \
    +GUEST
b-realm-role -r demo_club edit ACCOUNTANT - \
    +MEMBER
b-realm-role -r demo_club edit ADMINISTRATOR - \
    +ACCOUNTANT
EOF

    $req->set_realm('club_index');
    _init_realm_role($rru, <<'EOF');
b-realm-role -r club_index edit ANONYMOUS - \
    +ACCOUNTING_READ \
    +ACCOUNT_READ \
    +INVESTMENT_READ \
    +LOGIN
b-realm-role -r club_index edit USER - \
    +ANONYMOUS \
    +ANY_USER
b-realm-role -r club_index edit WITHDRAWN - \
    +USER \
b-realm-role -r club_index edit GUEST - \
    +WITHDRAWN \
    +ACCOUNTING_READ \
    +ACCOUNT_READ \
    +ADMIN_READ \
    +ANY_REALM_USER \
    +DOCUMENT_READ \
    +INVESTMENT_READ \
    +MAIL_FORWARD \
    +MAIL_POST \
    +MAIL_READ \
    +MAIL_WRITE \
    +MEMBER_READ \
    +MOTION_READ
b-realm-role -r club_index edit MEMBER - \
    +GUEST \
    +DOCUMENT_WRITE \
    +MAIL_RECEIVE
b-realm-role -r club_index edit ACCOUNTANT - \
    +MEMBER \
    +ACCOUNTING_WRITE \
    +ADMIN_WRITE \
    +DEBUG_ACTION \
    +MAIL_ADMIN \
    +MEMBER_WRITE \
    +MOTION_WRITE \
    +REALM_PUBLICIZE \
    +UNKNOWN
b-realm-role -r club_index edit ADMINISTRATOR - \
    +ACCOUNTANT
EOF

    $req->set_realm('club_cafe');
    _init_realm_role($rru, <<'EOF');
b-realm-role -r club edit ANONYMOUS - \
    +DOCUMENT_READ \
    +LOGIN \
    +MAIL_READ
b-realm-role -r club edit USER - \
    +ANONYMOUS \
    +ANY_USER \
    +MAIL_POST
b-realm-role -r club edit WITHDRAWN - \
    +USER
b-realm-role -r club edit GUEST - \
    +WITHDRAWN \
    +ACCOUNTING_READ \
    +ACCOUNT_READ \
    +ADMIN_READ \
    +ANY_REALM_USER \
    +INVESTMENT_READ \
    +MAIL_FORWARD \
    +MEMBER_READ \
    +MOTION_READ
b-realm-role -r club edit MEMBER - \
    +GUEST \
    +DOCUMENT_WRITE \
    +MAIL_RECEIVE
b-realm-role -r club edit ACCOUNTANT - \
    +MEMBER \
    +ACCOUNTING_WRITE \
    +ADMIN_WRITE \
    +DEBUG_ACTION \
    +FILE_ADMIN \
    +MAIL_ADMIN \
    +MEMBER_WRITE \
    +MOTION_WRITE \
    +REALM_PUBLICIZE \
    +UNKNOWN
b-realm-role -r club edit ADMINISTRATOR - \
    +ACCOUNTANT
EOF
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
