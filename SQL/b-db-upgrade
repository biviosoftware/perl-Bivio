#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Collection::Attributes;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::Type::DateTime;

#=VARIABLES

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
#TODO: Change this back to "eq 'upgrade'"
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.  Avo
    &{\&{$method}}();

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::SQL::Connection->commit;

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_constraints(string table, string column)
#
# Drop all the constraints on a particular table and column
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return;
}

# _fix_cost_basis_for_commissions()
#
# Changes the external_identifier on commissions to the same as the buy
# identifier.
#
sub _fix_cost_basis_for_commissions {

    # find commission with external_identifier of 0
    my($sth) = Bivio::SQL::Connection->execute('
            SELECT realm_owner_t.name,
                entry_t.realm_transaction_id, entry_t.entry_id,
                realm_instrument_entry_t.realm_instrument_id,
                entry_t.amount
            FROM realm_owner_t, entry_t, realm_instrument_entry_t
            WHERE realm_owner_t.realm_id=entry_t.realm_id
            AND entry_t.entry_id=realm_instrument_entry_t.entry_id
            AND entry_type=?
            AND external_identifier=?
            ORDER BY realm_owner_t.name',
	    [Bivio::Type::EntryType->INSTRUMENT_BUY_COMMISSION->as_sql_param,
		    '0']);
    while (my $row = $sth->fetchrow_arrayref) {
	my($name, $txn_id, $entry_id, $inst_id, $amount) = @$row;
	next if $name =~ /_demo_club$/;

	my($count) = _fix_cost_basis_get_count($txn_id);

	# find and correct their external_identifier
	my($lot) = _fix_cost_basis_get_lot($txn_id);
	next unless $lot;

	print(STDERR "\n$name, lot = $lot, commission = $amount");
	Bivio::SQL::Connection->execute('
                UPDATE realm_instrument_entry_t
                SET external_identifier=?
                WHERE entry_id=?',
		[$lot, $entry_id]);

	# find any sales for that lot, and update the cost basis
	_fix_sale_cost_basis($inst_id, $lot, $count, $amount);
    }
    print(STDERR "\n");
    return;
}

# _fix_cost_basis_get_count(string txn_id) : string
#
# Returns the number of shares bought for the specified transaction.
#
sub _fix_cost_basis_get_count {
    my($txn_id) = @_;
    my($count);

    my($sth) = Bivio::SQL::Connection->execute('
            SELECT SUM(realm_instrument_entry_t.count)
            FROM entry_t, realm_instrument_entry_t
            WHERE entry_t.entry_id=realm_instrument_entry_t.entry_id
            AND entry_t.realm_transaction_id=?',
	    [$txn_id]);
    while (my $row = $sth->fetchrow_arrayref) {
	$count = $row->[0];
    }

    die("couldn't find count") unless $count;
    return $count;
}

# _fix_cost_basis_get_lot(string txn_id) : string
#
# Returns the lot id associated with the transaction.
#
sub _fix_cost_basis_get_lot {
    my($txn_id) = @_;
    my($sth) = Bivio::SQL::Connection->execute('
            SELECT realm_instrument_entry_t.external_identifier
            FROM entry_t, realm_instrument_entry_t
            WHERE entry_t.entry_id=realm_instrument_entry_t.entry_id
            AND entry_t.tax_basis=1
            AND entry_t.realm_transaction_id=?
            AND external_identifier != ?
            AND external_identifier IS NOT NULL',
	    [$txn_id, '0']);
    my($lot);
    while (my $row = $sth->fetchrow_arrayref) {
	$lot = $row->[0];
    }
    unless ($lot) {
	use Bivio::Biz::Model::RealmTransaction;
	my($txn) = Bivio::Biz::Model::RealmTransaction->new();
	$txn->unauth_load_or_die(realm_transaction_id => $txn_id);
	print(STDERR "\n** skipping lot $txn_id, probable mutual fund, ".
		Bivio::Type::Date->to_literal($txn->get('date_time'))." **");
    }
    return $lot;
}

# _fix_sale_cost_basis(string inst_id, string lot, string count, string amount)
#
# Updates any sale for the specified lot
#
sub _fix_sale_cost_basis {
    my($inst_id, $lot, $count, $amount) = @_;

    my($sth) = Bivio::SQL::Connection->execute('
            SELECT entry_t.entry_id,
                - realm_instrument_entry_t.count,
                - entry_t.amount
            FROM entry_t, realm_instrument_entry_t
            WHERE entry_t.entry_id=realm_instrument_entry_t.entry_id
            AND entry_t.tax_basis=1
            AND entry_type=?
            AND realm_instrument_entry_t.realm_instrument_id=?
            and external_identifier=?',
	    [Bivio::Type::EntryType->INSTRUMENT_SELL->as_sql_param,
		    $inst_id, $lot]);

    while (my $row = $sth->fetchrow_arrayref) {
	my($entry_id, $sell_count, $sell_amount) = @$row;
	my($adjustment);
	# risky, could be a split followed by a partial sale
	if ($sell_count >= $count) {
	    $adjustment = $amount;
	}
	else {
	    $adjustment = Bivio::Type::Amount->round(
		    Bivio::Type::Amount->mul($amount,
		    Bivio::Type::Amount->div($sell_count, $count)), 2);
	}
	print(STDERR "\n\tadjust cost basis, $sell_amount by $adjustment ".
		"($sell_count, $count)");

	Bivio::SQL::Connection->execute('
                UPDATE entry_t
                SET amount=?
                WHERE entry_id=?',
		[Bivio::Type::Amount->neg(
			Bivio::Type::Amount->add($sell_amount, $adjustment)),
			$entry_id]);
    }
    return;
}


# _upgrade()
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {

    use Bivio::Agent::Request;
    use Bivio::Biz::Model::RealmOwner;
    use Bivio::Data::EW::DateCalculator;

    my($req) = Bivio::Agent::Request->get_current_or_new;
    my($realm) = Bivio::Biz::Model::RealmOwner->new($req);
    my($sth) = Bivio::SQL::Connection->execute('
            SELECT club_id
            FROM club_t',[]);
    while (my $row = $sth->fetchrow_arrayref) {
	$realm->unauth_load(realm_id => $row->[0])
		|| die("couldn't load realm ".$row->[0]);
	$req->put(auth_id => $realm->get('realm_id'));

	print(STDERR $realm->get('name')."\n");

	# compute instrument acquisition dates
	print(STDERR "\tcomputing acquisition dates\n");
	Bivio::Data::EW::DateCalculator->generate_acquisition_dates($realm);
    }

    _fix_cost_basis_for_commissions();
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
