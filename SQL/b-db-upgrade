#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::MGFSInstrument;
use Bivio::Collection::Attributes;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::Type::DateTime;



#=VARIABLES

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
#TODO: Change this back to "eq 'upgrade'"
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.  Avo
    &{\&{$method}}();

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::SQL::Connection->commit;

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    _do_sql("
update $table $column = $value
/");

    return;
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_constraints(string table, string column)
#
# Drop all the constraints on a particular table and column
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return;
}

# _fix_mgfs_names(hash_ref name_map)
#
# Takes a map of (bad_name => 'good_name') and updates mgfs_instrument_t
# and instrument_t.
#
sub _fix_mgfs_names {
    my($name_map) = @_;

    my($mgfs_instrument) = Bivio::Biz::Model::MGFSInstrument->new(
	    Bivio::Agent::Request->get_current_or_new);
    foreach my $bad_name (keys(%$name_map)) {
	if ($mgfs_instrument->unsafe_load(name => $bad_name)) {

	    # this will all synchronize with the instrument_t table
	    $mgfs_instrument->update({name => $name_map->{$bad_name}});
	}
	else {
	    print(STDERR "\nmgfs_instrument name '$bad_name' not found\n");
	}
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _upgrade()
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {
    _drop_constraints('file_t', 'volume');
    _do_sql('
ALTER TABLE file_t modify volume not null
/
ALTER TABLE file_t add check (volume BETWEEN 1 AND 5)
/
CREATE INDEX file_name_sort_i ON file_t (
  name_sort
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_indx
/
');
    _add_column('file_t', 'is_public', 'NUMBER(1)');
    _upgrade_part2();
    return;
}

# _upgrade_part2()
#
# Because the upgrade failed in the middle on test, had to split in
# two parts.
#
sub _upgrade_part2 {
    _modify_column('file_t', 'aux_info', 'VARCHAR(4000)');

    # mail_t
    _do_sql('
CREATE TABLE mail_t (
  mail_id NUMBER(18),
  realm_id NUMBER(18),
  message_id VARCHAR2(100),
  date_time DATE,
  from_name VARCHAR2(100),
  from_name_sort VARCHAR2(100),
  from_email VARCHAR2(100),
  reply_to_email VARCHAR2(100),
  subject VARCHAR2(100),
  subject_sort VARCHAR2(100),
  bytes NUMBER(9),
  is_public NUMBER(1),
  is_thread_root NUMBER(1),
  thread_root_id NUMBER(18),
  thread_parent_id NUMBER(18),
  rfc822_file_id NUMBER(18),
  cache_file_id NUMBER(18)
)
  storage (initial 50m next 50m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_data
/
CREATE INDEX mail_realm_i ON mail_t (
  realm_id
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_indx
/
CREATE INDEX mail_cache_file_i ON mail_t (
  cache_file_id
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_indx
/

CREATE INDEX mail_rfc822_file_i ON mail_t (
  rfc822_file_id
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_indx
/

--
-- mail_t
--
ALTER TABLE mail_t add primary key(mail_id)
  using index tablespace realm_indx
  storage (initial 10m NEXT 10m minextents 1 maxextents 500 pctincrease 0)
/
ALTER TABLE mail_t modify realm_id not null
/
ALTER TABLE mail_t 
  add foreign key (realm_id)
    references club_t(club_id)
/
ALTER TABLE mail_t modify message_id not null
/
ALTER TABLE mail_t modify date_time not null
/
ALTER TABLE mail_t modify from_name not null
/
ALTER TABLE mail_t modify from_name_sort not null
/
ALTER TABLE mail_t modify from_email not null
/
ALTER TABLE mail_t modify subject not null
/
ALTER TABLE mail_t modify subject_sort not null
/
ALTER TABLE mail_t modify is_public not null
/
ALTER TABLE mail_t modify is_thread_root not null
/
ALTER TABLE mail_t 
  add foreign key (rfc822_file_id)
    references file_t(file_id)
/
ALTER TABLE mail_t 
  add foreign key (cache_file_id)
    references file_t(file_id)
/
ALTER TABLE mail_t modify bytes not null
/
');
    return;
}


# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
