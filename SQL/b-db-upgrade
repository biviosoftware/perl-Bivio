#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Auth::Realm;
use Bivio::Auth::RealmType;
use Bivio::Biz::Accounting::Tax;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::RealmOwner;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::ShellUtil;
use Bivio::Type::Date;
use Bivio::Type::DateInterval;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.
    &{\&{$method}}($req);

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::Agent::Task->commit($req);

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table set $column = $value
/");

    return;
}

# _disclaimer(string user) : string
#
# Returns a disclaimer for a particular person.
#
sub _disclaimer {
    my($celeb) = @_;
    return <<"EOF";
Disclaimer: statements are opinions expressed by $celeb.
These statements are not intended to replace professional
advice. When in doubt, follow the advice of your investment, tax or
legal advisors who are familiar with your particular circumstances.
EOF
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _init_realm_role(Bivio::Biz::Util::RealmRole rru, string perms)
#
# Accepts a configuration like in Biz::Util::RealmRole and sets for
# a particular club.
#
sub _init_realm_role {
    my($rru, $perms) = @_;
    $perms =~ s/\\//g;
    $perms =~ s/^.*b-realm-role.* edit /!/mg;
    foreach my $edit (split(/!/, $perms)) {
	next unless $edit;
	$rru->edit(split(' ', $edit));
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _sqlplus(string db_login, string actions) : string_ref
#
# Runs I<actions> in sqlplus with I<db_login>.
# Returns result of the execution.
#
# I<actions> will have a semicolon (;) appended to it.
#
# If any of I<actions> fails, will rollback and exit.
#
sub _sqlplus {
    my($db_login, $actions) = @_;
    my($res) = Bivio::ShellUtil::piped_exec(undef, 'su - oracle -c sqlplus',
            <<"EOF");
$db_login
set linesize 10000
set pagesize 10000
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit sql.sqlcode rollback
$actions;
disconnect
exit
EOF
    return $res;
}

# _upgrade(Bivio::Agent::Request req)
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {
    my($req) = @_;
    _upgrade_ec_subscription($req);
    print("\n*** done ***\n");
    return;
}

# _upgrade_ec_subscription(Bivio::Agent::Request req)
#
# Delete renewal_period and drop ec_subscription_t6 constraint
#
sub _upgrade_ec_subscription {
    my($req) = @_;
    print("Updating infinite subscriptions\n");
    my($d) = 'Bivio::Type::Date';
    # change infinite subscription to be get_max - 1 year.
    Bivio::SQL::Connection->execute("
UPDATE ec_subscription_t set end_date = to_date(?, 'J SSSSS')
WHERE end_date = to_date(?, 'J SSSSS')",
	[
	    # Hack: copied from Model.ECSubscription
	    $d->add_days($d->get_max, -366),
	    $d->get_max,
	]);
    print("Deleting free trials where other subscriptions in place\n");
    # delete free_trials which have another subscription;
    _do_sql('
DELETE FROM ec_subscription_t
WHERE subscription_type = '
	.Bivio::Type::ECSubscription->FREE_TRIAL->as_sql_param
	.'
AND realm_id IN (
   SELECT realm_id
   FROM ec_subscription_t
   WHERE subscription_type != '
	.Bivio::Type::ECSubscription->FREE_TRIAL->as_sql_param
	.'
   )
/'
	);

    print("Making all subscriptions non-overlapping\n");
    # Find all realms with more than one subscription
    my($realms) = [];
    my($sth) = Bivio::SQL::Connection->execute('
SELECT distinct realm_owner_t.realm_id, realm_owner_t.name
  FROM ec_subscription_t, realm_owner_t
  WHERE realm_owner_t.realm_id = ec_subscription_t.realm_id
  AND subscription_type != '
	.Bivio::Type::ECSubscription->FREE_TRIAL->as_sql_param
	.'
  AND realm_type = '
	.Bivio::Auth::RealmType->CLUB->as_sql_param
	.'
  HAVING count(ec_subscription_id) > 1
  GROUP BY realm_owner_t.realm_id, realm_owner_t.name
  ORDER BY realm_owner_t.name
    ');
    while (my $row = $sth->fetchrow_arrayref) {
	push(@$realms, [$row->[0], $row->[1]]);
    }

    # Update all subscriptions so they are non-overlapping.  Most recent
    # subscription is first (and "right").
    my($ecs) = Bivio::Biz::Model->new($req, 'ECSubscription');
    foreach my $ro (@$realms) {
	my($realm_id, $realm_name) = @$ro;
	my($it) = $ecs->unauth_iterate_start(
	    'end_date desc', {realm_id => $realm_id});
	my($end_date);
	while ($ecs->iterate_next_and_load($it)) {
	    my($start_date) = $ecs->get('start_date');
	    # AK subs always end on 12/31.  I looked through DB and there
	    # are a number which are 1/1, so need a special correction.
	    # Start dates are always ok.
	    if ($ecs->get('subscription_type')
		->equals_by_name('ACCOUNT_KEEPER')
		&& ($d->to_parts($ecs->get('end_date')))[3] == 1) {
		$ecs->update({
		    end_date => $d->add_days($ecs->get('end_date'), -1)});
	    }

	    if ($end_date) {
		if ($d->compare($ecs->get('start_date'), $end_date) >= 0) {
		    $ecs->update({
			end_date => $d->add_days($end_date, -1)});
		    Bivio::IO::Alert->info($realm_name, ': new end_date=',
			$d->to_string($ecs->get('end_date')),
			' ', $ecs->get('subscription_type')->get_name);
		}
		if ($d->compare($start_date, $end_date) >= 0) {
		    $ecs->update({start_date =>
			$d->add_days($end_date, -1)});
		    $start_date = $ecs->get('start_date');
		    Bivio::IO::Alert->info($realm_name, ': new start_date=',
			$d->to_string($start_date),
			' ', $ecs->get('subscription_type')->get_name);
		}
	    }
	    $end_date = $start_date;
	}
    }
    print("Dropping renewal_period and renewal_method\n");
    # Fix up tables (dropping columns and unnecessary constraints)
    _do_sql('
DROP INDEX ec_subscription_t6
/
ALTER TABLE ec_subscription_t DROP COLUMN renewal_period
/
ALTER TABLE ec_subscription_t DROP COLUMN renewal_method
/
');
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
