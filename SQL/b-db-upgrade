#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Collection::Attributes;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::Type::DateTime;

#=VARIABLES

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
#TODO: Change this back to "eq 'upgrade'"
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.  Avo
    &{\&{$method}}();

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::SQL::Connection->commit;

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _do(string sql) : statement
#
# Returns the last statement executed.
#
sub _do {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_constraints(string table, string column)
#
# Drop all the constraints on a particular table and column
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do("ALTER TABLE $table drop constraint $c
                /");
    }
    return;
}

# _upgrade()
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {

    # Make sure tablespace exists before doing anything
    my($statement) = _do(<<'EOF');
SELECT DISTINCT tablespace_name
  FROM user_tablespaces
  WHERE tablespace_name = 'REALM_LOB'
/
EOF
    die('Need to create realm_lob tablespace')
	    unless $statement->fetchrow_arrayref;

    # Create file_t and file_quota_t
    _do(<<'EOF');
CREATE TABLE file_quota_t (
  realm_id NUMBER(18),
  kbytes NUMBER(9),
  max_kbytes NUMBER(9)
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_data
/

CREATE TABLE file_t (
  file_id NUMBER(18),
  realm_id NUMBER(18),
  volume NUMBER(2),
  directory_id NUMBER(18),
  name VARCHAR2(100),
  user_id NUMBER(18),
  modified_date_time DATE,
  bytes NUMBER(9),
  is_directory NUMBER(1),
  source_name VARCHAR2(500),
  content_type VARCHAR2(500),
  content BLOB
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_data
  lob (content) store as
  (tablespace realm_lob storage
  (initial 100m next 100m pctincrease 0)
  chunk 8k pctversion 10 nocache logging)
/

--
-- file_volume_t
--
ALTER TABLE file_volume_t add primary key(realm_id, type)
  using index tablespace realm_indx
  storage (initial 10m NEXT 10m minextents 1 maxextents 500 pctincrease 0)
/
ALTER TABLE file_volume_t modify type not null
/
ALTER TABLE file_volume_t add check (type between 1 and 4)
/
ALTER TABLE file_volume_t
  add foreign key (realm_id)
    references realm_owner_t(realm_id)
/
ALTER TABLE file_volume_t modify realm_id not null
/
ALTER TABLE file_volume_t modify kbytes not null
/
ALTER TABLE file_volume_t add check (kbytes >= 0)
/
ALTER TABLE file_volume_t modify files not null
/
ALTER TABLE file_volume_t add check (files >= 0)
/
ALTER TABLE file_volume_t modify in_quota not null
/
ALTER TABLE file_volume_t add check (in_quota BETWEEN 0 AND 1)
/

--
-- file_t
--
ALTER TABLE file_t add primary key(file_id)
  using index tablespace realm_indx
  storage (initial 10m NEXT 10m minextents 1 maxextents 500 pctincrease 0)
/
ALTER TABLE file_t
  add foreign key (realm_id)
    references realm_owner_t(realm_id)
/
ALTER TABLE file_t modify realm_id not null
/
ALTER TABLE file_t
  add foreign key (directory_id)
    references file_t(file_id)
/
ALTER TABLE file_t modify volume not null
/
ALTER TABLE file_t
  add foreign key (realm_id, volume)
    references file_volume_t(realm_id, type)
/
ALTER TABLE file_t add check (volume between 1 and 5)
/
ALTER TABLE file_t
  add foreign key (user_id)
    references user_t(user_id)
/
ALTER TABLE file_t modify modified_date_time not null
/
ALTER TABLE file_t modify name not null
/
ALTER TABLE file_t modify bytes not null
/
ALTER TABLE file_t add check (bytes >= 0)
/
ALTER TABLE file_t modify is_directory not null
/
ALTER TABLE file_t add check (is_directory BETWEEN 0 AND 1)
/
ALTER TABLE file_t add unique(directory_id, name)
  using index tablespace realm_indx
  storage (initial 10m NEXT 10m minextents 1 maxextents 500 pctincrease 0)
/

CREATE INDEX file_directory_i ON file_t (
  directory_id
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_indx
/

CREATE INDEX file_realm_volume_i ON file_t (
  realm_id,
  volume
)
  storage (initial 10m next 10m minextents 1 maxextents 500 pctincrease 0)
  tablespace realm_indx
/
EOF
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
