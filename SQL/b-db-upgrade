#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Auth::Realm;
use Bivio::Auth::RealmType;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::MGFSInstrument;
use Bivio::Biz::Model::RealmOwner;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::ShellUtil;
use Bivio::Type::Date;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.
    &{\&{$method}}($req);

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::Agent::Task->commit($req);

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table set $column = $value
/");

    return;
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _sqlplus(string db_login, string actions) : string_ref
#
# Runs I<actions> in sqlplus with I<db_login>.
# Returns result of the execution.
#
# I<actions> will have a semicolon (;) appended to it.
#
# If any of I<actions> fails, will rollback and exit.
#
sub _sqlplus {
    my($db_login, $actions) = @_;
    my($res) = Bivio::ShellUtil::piped_exec(undef, 'su - oracle -c sqlplus',
            <<"EOF");
$db_login
set linesize 10000
set pagesize 10000
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit sql.sqlcode rollback
$actions;
disconnect
exit
EOF
    return $res;
}

# _upgrade(Bivio::Agent::Request req)
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {
    my($req) = @_;

    _upgrade_account_sync();
    _upgrade_realm_notice();
    _upgrade_adjustment_types();
    print("\n*** done ***\n");
    return;
}

# _upgrade_account_sync()
#
# Recreates the account_sync_t table.
#
sub _upgrade_account_sync {
    print("Recreating account_sync_\n");
    _do_sql('
DROP TABLE account_sync_t
/
CREATE TABLE account_sync_t (
  realm_transaction_id NUMBER(18),
  realm_id NUMBER(18),
  sync_key VARCHAR2(100),
  import_date DATE
)
  tablespace data_1m
  pctfree 5 pctused 90 initrans 2 storage (freelists 8)
/
ALTER TABLE account_sync_t
  add constraint account_sync_t1
  primary key(realm_transaction_id)
  using index tablespace index_1m pctfree 0 initrans 4 storage (freelists 8)
/
ALTER TABLE account_sync_t
  add constraint account_sync_t2
  foreign key (realm_id)
  references realm_owner_t(realm_id)
/
ALTER TABLE account_sync_t modify realm_id not null
/
ALTER TABLE account_sync_t modify sync_key not null
/
CREATE INDEX account_sync_t3 on account_sync_t (
  realm_id
)
  tablespace index_1m
  pctfree 0 initrans 4 storage (freelists 8)
/
CREATE INDEX account_sync_t4 on account_sync_t (
  sync_key
)
  tablespace index_1m
  pctfree 0 initrans 4 storage (freelists 8)
  /
ALTER TABLE account_sync_t modify import_date NOT NULL
/
ALTER TABLE account_sync_t
  add constraint account_sync_t5
  foreign key (realm_transaction_id)
  references realm_transaction_t(realm_transaction_id)
/
');
    return;
}

# _upgrade_adjustment_types()
#
# Expands entry_type constraints to include cash/investment/member
# adjustments.
#
sub _upgrade_adjustment_types {
    print("expanding entry_type constraints\n");

    _drop_constraints('entry_t', 'entry_type');
    _do_sql('
ALTER TABLE entry_t modify entry_type not null
/
ALTER TABLE entry_t
  add constraint entry_t7
  check (entry_type between 1 and 9
  or entry_type between 100 and 113
  or entry_type=117
  or entry_type between 200 and 221)
/
');
    return;
}

# _upgrade_realm_notice()
#
# Creates realm notice table.
#
sub _upgrade_realm_notice {
    print("Creating realm_notice_t\n");
    _do_sql('
CREATE TABLE realm_notice_t (
  realm_notice_id NUMBER(18),
  realm_id NUMBER(18),
  -- Applies to this role or greater
  at_least_role NUMBER(2),
  creation_date_time DATE,
  realm_notice_type NUMBER(2),
  template_params VARCHAR(4000)
)
  tablespace data_1m
  pctfree 5 pctused 90 initrans 2 storage (freelists 8)
/

CREATE sequence realm_notice_s
  minvalue 100008 maxvalue 999999999999999999
  nocycle cache 10 increment BY 100000
/

ALTER TABLE realm_notice_t
  add constraint realm_notice_t1
  primary key(realm_notice_id)
  using index tablespace index_1m pctfree 0 initrans 4 storage (freelists 8)
/

--
-- realm_notice_t
--
ALTER TABLE realm_notice_t modify realm_id not null
/
ALTER TABLE realm_notice_t
  add constraint realm_notice_t2
  foreign key (realm_id)
  references realm_owner_t(realm_id)
/
CREATE INDEX realm_notice_t3 on realm_notice_t (
  realm_id
)
  tablespace index_1m
  pctfree 50 initrans 4 storage (freelists 8)
/
ALTER TABLE realm_notice_t modify at_least_role not null
/
ALTER TABLE realm_notice_t
  add constraint realm_notice_t4
  check (at_least_role between 1 and 7)
/
ALTER TABLE realm_notice_t modify creation_date_time not null
/
CREATE INDEX realm_notice_t5 ON realm_notice_t (
  creation_date_time
)
  tablespace index_1m
  pctfree 50 initrans 4 storage (freelists 8)
/
ALTER TABLE realm_notice_t modify realm_notice_type not null
/
ALTER TABLE realm_notice_t
  add constraint realm_notice_t6
  check (realm_notice_type between 1 and 5)
/
');
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
