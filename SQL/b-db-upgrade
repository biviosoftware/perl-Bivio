#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::MGFSInstrument;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.  Avo
    &{\&{$method}}();

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::SQL::Connection->commit;

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table $column = $value
/");

    return;
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _fix_mgfs_names(hash_ref name_map)
#
# Takes a map of (bad_name => 'good_name') and updates mgfs_instrument_t
# and instrument_t.
#
sub _fix_mgfs_names {
    my($name_map) = @_;

    my($mgfs_instrument) = Bivio::Biz::Model::MGFSInstrument->new(
	    Bivio::Agent::Request->get_current_or_new);
    foreach my $bad_name (keys(%$name_map)) {
	if ($mgfs_instrument->unsafe_load(name => $bad_name)) {

	    # this will all synchronize with the instrument_t table
	    $mgfs_instrument->update({name => $name_map->{$bad_name}});
	}
	else {
	    print(STDERR "\nmgfs_instrument name '$bad_name' not found\n");
	}
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _upgrade()
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {

    print("\ncreating member_allocation_t");

    # expand entry_t.entry_type constraint to cover
    # the new type MEMBER_LEGACY_UNIT_DISTRIBUTION
    _do_sql('
ALTER TABLE entry_t
  drop constraint entry_t7
/');
    _do_sql('
ALTER TABLE entry_t
  add constraint entry_t7
  check (entry_type between 1 and 6
  or entry_type between 100 and 112
  or entry_type between 200 and 218)
/');

    # create new member_allocation_t table
    _do_sql('
CREATE TABLE member_allocation_t (
  realm_id NUMBER(18),
  user_id NUMBER(18),
  allocation_date DATE,
  tax_category NUMBER(3),
  amount NUMBER(20,6)
)
  tablespace data_1m
  pctfree 25 pctused 70 initrans 2 storage (freelists 8)
/');
    _do_sql('
ALTER TABLE member_allocation_t
  add constraint member_allocation_t1
  primary key(realm_id, user_id, allocation_date, tax_category)
  using index tablespace index_1m pctfree 0 initrans 4 storage (freelists 8)
/');
    _do_sql('
ALTER TABLE member_allocation_t modify realm_id not null
/
ALTER TABLE member_allocation_t
  add constraint member_allocation_t2
  foreign key (realm_id)
  references realm_owner_t(realm_id)
/
CREATE INDEX member_allocation_t3 on member_allocation_t (
  realm_id
)
  tablespace index_8m
  pctfree 50 initrans 4 storage (freelists 8)
/
ALTER TABLE member_allocation_t modify user_id not null
/
ALTER TABLE member_allocation_t
  add constraint member_allocation_t4
  foreign key (user_id)
  references user_t(user_id)
/
CREATE INDEX member_allocation_t4 on member_allocation_t (
  user_id
)
  tablespace index_8m
  pctfree 50 initrans 4 storage (freelists 8)
/
ALTER TABLE member_allocation_t modify tax_category not null
/
ALTER TABLE member_allocation_t
  add constraint member_allocation_t5
  check (tax_category between 1 and 10)
/
ALTER TABLE member_allocation_t modify allocation_date not null
/
ALTER TABLE member_allocation_t modify amount not null
/');

    use Bivio::Auth::Realm;
    use Bivio::Auth::RealmType;
    use Bivio::Biz::Model::RealmOwner;
    use Bivio::Biz::Model::RealmTransaction;
    use Bivio::Data::EW::ClubImporter;
    use Bivio::Type::EntryType;
    use Bivio::Biz::Model::EntryList;

    my($req) = Bivio::Agent::Request->get_current_or_new;
    my($type) = 'Bivio::Type::EntryType';

    # migrate all existing imported withdrawal/year-end distributions
    # to member_allocation_t

    # break unit distributions away from other transaction entries
    print("\nbreaking legacy unit distributions into separate transactions");
    my($txn) = Bivio::Biz::Model::RealmTransaction->new($req);
    my($sth) = Bivio::SQL::Connection->execute('
            SELECT DISTINCT entry_t.realm_transaction_id,
                entry_t.entry_type
            FROM entry_t, member_entry_t
            WHERE entry_t.entry_id=member_entry_t.entry_id
            AND (entry_type=?
                OR (entry_type=? AND member_entry_t.units != 0))',
	    [$type->MEMBER_WITHDRAWAL_DISTRIBUTION->as_sql_param,
		    $type->MEMBER_DISTRIBUTION->as_sql_param]);
    my($fields) = $txn->get_keys();
    while (my $row = $sth->fetchrow_arrayref) {
	my($txn_id, $etype) = @$row;
	$txn->unauth_load_or_die(realm_transaction_id => $txn_id);
	my($values) = {};
	foreach my $field (@$fields) {
	    next if $field eq 'realm_transaction_id';
	    $values->{$field} = $txn->get($field);
	}
	$txn->create($values);

	if ($etype == $type->MEMBER_WITHDRAWAL_DISTRIBUTION->as_sql_param) {
	    Bivio::SQL::Connection->execute('
                    UPDATE entry_t
                    SET realm_transaction_id=?
                    WHERE realm_transaction_id=?
                    AND entry_type=?',
		    [$txn->get('realm_transaction_id'), $txn_id,
			$type->MEMBER_WITHDRAWAL_DISTRIBUTION->as_sql_param]);
	}
	else {
	    Bivio::SQL::Connection->execute('
                    UPDATE entry_t
                    SET realm_transaction_id=?
                    WHERE realm_transaction_id=?
                    AND entry_type=?
                    AND entry_id IN (
                        SELECT member_entry_t.entry_id
                        FROM member_entry_t
                        WHERE member_entry_t.entry_id=entry_t.entry_id
                        AND units != 0)',
		    [$txn->get('realm_transaction_id'), $txn_id,
			$type->MEMBER_DISTRIBUTION->as_sql_param]);
	}
    }

    # change distributions to new legacy type
    print("\nmoving member distribution types to legacy unit distribution");
    Bivio::SQL::Connection->execute('
            UPDATE entry_t
            SET entry_type=?
            WHERE entry_type in (?,?)',
	    [$type->MEMBER_LEGACY_UNIT_DISTRIBUTION->as_sql_param,
		    $type->MEMBER_WITHDRAWAL_DISTRIBUTION->as_sql_param,
		    $type->MEMBER_DISTRIBUTION->as_sql_param]);

    # migrate data to member_allocation_t using ClubImporter
    print("\nmigrating imported distributions for all clubs");
    my($realm) = Bivio::Biz::Model::RealmOwner->new($req);
    $sth = Bivio::SQL::Connection->execute('
            SELECT realm_id
            FROM realm_owner_t
            WHERE realm_type=?
            ORDER BY name',
	    [Bivio::Auth::RealmType->CLUB->as_sql_param]);
    while (my $row = $sth->fetchrow_arrayref) {
	my($realm_id) = $row->[0];
	$realm->unauth_load_or_die(realm_id => $realm_id);
	$req->set_realm(Bivio::Auth::Realm->new($realm));
	print("\n\t".$realm->get('name'));
	Bivio::Data::EW::ClubImporter->transform_allocations($realm);
    }

    # Add new MAIL_FORWARD permission flag (same as MAIL_WRITE)
    use Bivio::Biz::Util::RealmRole;
    Bivio::Biz::Util::RealmRole->set_same('MAIL_FORWARD', 'MAIL_WRITE');
    
    print("\n*** done ***\n");
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
