#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::MGFSInstrument;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.  Avo
    &{\&{$method}}();

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::SQL::Connection->commit;

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table $column = $value
/");

    return;
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _fix_mgfs_names(hash_ref name_map)
#
# Takes a map of (bad_name => 'good_name') and updates mgfs_instrument_t
# and instrument_t.
#
sub _fix_mgfs_names {
    my($name_map) = @_;

    my($mgfs_instrument) = Bivio::Biz::Model::MGFSInstrument->new(
	    Bivio::Agent::Request->get_current_or_new);
    foreach my $bad_name (keys(%$name_map)) {
	if ($mgfs_instrument->unsafe_load(name => $bad_name)) {

	    # this will all synchronize with the instrument_t table
	    $mgfs_instrument->update({name => $name_map->{$bad_name}});
	}
	else {
	    print(STDERR "\nmgfs_instrument name '$bad_name' not found\n");
	}
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _upgrade()
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {

    use Bivio::Agent::Request;
    use Bivio::Biz::Model::RealmOwner;
    use Bivio::Biz::Model::RealmDecor;
    use Bivio::Biz::Util::Club;
    use Bivio::Biz::Util::RealmRole;

    print("Creating realm_decor_t table\n");
    my($req) = Bivio::Agent::Request->get_current_or_new;

    my($sth) = Bivio::SQL::Connection->execute(<<'EOF');
CREATE TABLE realm_decor_t (
  realm_id NUMBER(18),
  show_all_columns NUMBER(1),
  show_disclaimer NUMBER(1),
  show_profile NUMBER(1),
  disclaimer VARCHAR2(4000),
  profile_title VARCHAR2(100),
  profile_bio VARCHAR2(4000),
  portrait_filename VARCHAR2(100),
  portrait_width NUMBER(9),
  portrait_height NUMBER(9)
)
  tablespace data_1m
  pctfree 5 pctused 90 initrans 2 storage (freelists 8)
EOF
    my($sth) = Bivio::SQL::Connection->execute(<<'EOF');
ALTER TABLE realm_decor_t
  add constraint realm_decor_t1
  primary key(realm_id)
  using index tablespace index_1m pctfree 0 initrans 4 storage (freelists 8)
EOF
    my($sth) = Bivio::SQL::Connection->execute(<<'EOF');
ALTER TABLE realm_decor_t
  add constraint realm_decor_t2
  foreign key (realm_id)
  references realm_owner_t(realm_id)
EOF
    my($sth) = Bivio::SQL::Connection->execute(<<'EOF');
ALTER TABLE realm_decor_t
  add constraint realm_decor_t3
  check (show_all_columns BETWEEN 0 AND 1)
EOF
    my($sth) = Bivio::SQL::Connection->execute(<<'EOF');
ALTER TABLE realm_decor_t
  add constraint realm_decor_t4
  check (show_disclaimer BETWEEN 0 AND 1)
EOF
    my($sth) = Bivio::SQL::Connection->execute(<<'EOF');
ALTER TABLE realm_decor_t
  add constraint realm_decor_t5
  check (show_profile BETWEEN 0 AND 1)
EOF

    print("Renaming celebrity clubs\n");
    Bivio::Biz::Util::Club->rename('ask_candis', 'ask_candis_inbox', 1);
    Bivio::Biz::Util::Club->rename('ask_candis_publish', 'ask_candis', 1);
    Bivio::Biz::Util::Club->rename('trez_talk', 'trez_talk_inbox', 1);
    Bivio::Biz::Util::Club->rename('trez_talk_publish', 'trez_talk', 1);

    print("Fixing permissions for the celebrity clubs\n");
    # Allow everyone to mail
    Bivio::Biz::Util::RealmRole->edit('ask_candis', 'ANONYMOUS', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('ask_candis', 'USER', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('ask_candis', 'WITHDRAWN', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('ask_candis', 'GUEST', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('trez_talk', 'ANONYMOUS', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('trez_talk', 'USER', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('trez_talk', 'WITHDRAWN', '+MAIL_WRITE');
    Bivio::Biz::Util::RealmRole->edit('trez_talk', 'GUEST', '+MAIL_WRITE');

    print("Setup decoration for the celebies\n");
    my($realm) = Bivio::Biz::Model::RealmOwner->new($req);
    my($decor) = Bivio::Biz::Model::RealmDecor->new($req);

    $realm->unauth_load_or_die(name => 'ask_candis');
    $decor->create({
        realm_id => $realm->get('realm_id'),
        show_all_columns => 0,
        show_disclaimer => 1,
        show_profile => 1,
        disclaimer => 	    <<'EOF',
Disclaimer: statements are opinions expressed by Candis King. These statements
are not intended to replace professional advice. When in doubt, follow the
advice of your local tax advisor or accountant who is familiar with your
particular circumstances.
EOF
        profile_title => 'Candis King',
        portrait_filename => 'candis_king.jpg',
        profile_bio => <<'EOF',
Feel free to ask Candis King your nuts-and-bolts questions about bivio,
investing, and the investment club experience.
<p>
Well known in club circles, Candis has traveled the US teaching investment
classes, and is a frequent writer for publications ranging from the
Motley Fool to the Armchair Millionaire.
<p>
A telecom industry veteran, the mother of two says her only regret in life
is not having joined a club sooner.  Though enthusiastic about her clubs,
she's willing to take the bad with the good.  "We've committed just about
every investment mistake there is," she says, "but we've learned from them,
and so our experience has been overwhelmingly positive."
EOF
       });

    $realm->unauth_load_or_die(name => 'trez_talk');
    $decor->create({
        realm_id => $realm->get('realm_id'),
        show_all_columns => 0,
        show_disclaimer => 1,
        show_profile => 1,
        disclaimer => 	    <<'EOF',
Disclaimer: statements are opinions expressed by Rip West and Jerry Dressel
and are not official statements from either bivio or the IRS. These statements
are not intended to replace professional tax or accounting advice.
When in doubt, follow the advice of your local tax advisor or accountant
who is familiar with your particular circumstances.
EOF
        profile_title => 'Jerry & Rip',
        portrait_filename => 'jerry_rip.jpg',
        profile_bio => <<'EOF',
Jerry Dressel and Rip West will answer your questions about club
accounting and taxes.
<p>
Investment club treasurers have been relying on them for years,
via the <a href="http://www.better-investing.org">NAIC</a> and
<a href="http://www.fool.com">Motley Fool</a> message boards.
Now you can find their sound advice right here at "Trez Talk"
on bivio.
<p>
Jerry is a pilot for Northwest Airlines who keeps himself busy teaching
accounting courses for fellow investors. Though Rip "has failed retirement
three times" he's had a lot more success as a financial planner, investment
advisor, and accountant, having launched his own CPA firm back in the 1950s.
Both have worked extensively with computers, and they have decades of
investment club experience between them.
EOF
       });

    print("\n*** done ***\n");
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
