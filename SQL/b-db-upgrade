#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Auth::Realm;
use Bivio::Auth::RealmType;
use Bivio::Biz::Accounting::Tax;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::RealmOwner;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::ShellUtil;
use Bivio::Type::Date;
use Bivio::Type::DateInterval;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.
    &{\&{$method}}($req);

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::Agent::Task->commit($req);

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table set $column = $value
/");

    return;
}

# _disclaimer(string user) : string
#
# Returns a disclaimer for a particular person.
#
sub _disclaimer {
    my($celeb) = @_;
    return <<"EOF";
Disclaimer: statements are opinions expressed by $celeb.
These statements are not intended to replace professional
advice. When in doubt, follow the advice of your investment, tax or
legal advisors who are familiar with your particular circumstances.
EOF
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _init_realm_role(Bivio::Biz::Util::RealmRole rru, string perms)
#
# Accepts a configuration like in Biz::Util::RealmRole and sets for
# a particular club.
#
sub _init_realm_role {
    my($rru, $perms) = @_;
    $perms =~ s/\\//g;
    $perms =~ s/^.*b-realm-role.* edit /!/mg;
    foreach my $edit (split(/!/, $perms)) {
	next unless $edit;
	$rru->edit(split(' ', $edit));
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _sqlplus(string db_login, string actions) : string_ref
#
# Runs I<actions> in sqlplus with I<db_login>.
# Returns result of the execution.
#
# I<actions> will have a semicolon (;) appended to it.
#
# If any of I<actions> fails, will rollback and exit.
#
sub _sqlplus {
    my($db_login, $actions) = @_;
    my($res) = Bivio::ShellUtil::piped_exec(undef, 'su - oracle -c sqlplus',
            <<"EOF");
$db_login
set linesize 10000
set pagesize 10000
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit sql.sqlcode rollback
$actions;
disconnect
exit
EOF
    return $res;
}

# _upgrade(Bivio::Agent::Request req)
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {
    my($req) = @_;
    _upgrade_expand_db_constraints($req);
    my($realm_ids) = _upgrade_fix_expense_taxes($req);
    _upgrade_clear_2001_allocations($req, $realm_ids);
    _upgrade_fix_five_year_gains($req);
    print("\n*** done ***\n");
    return;
}

# _upgrade_clear_2001_allocations(Bivio::Agent::Request req, array_ref realm_ids)
#
# Clears 2001 allocations for clubs with 5YCG, charity, or margin interest.
#
sub _upgrade_clear_2001_allocations {
    my($req, $realm_ids) = @_;
    use Bivio::Biz::Accounting::AllocationCache;
    print("clearing 2001 allocations for clubs with 5YCG, charity, "
	."or margin interest\n");

    my($date) = Bivio::Type::Date->from_literal_or_die('1/1/2001');
    my($sth) = Bivio::SQL::Connection->execute('
        SELECT DISTINCT realm_id
        FROM member_allocation_t
        WHERE tax_category=?',
	[Bivio::Type::TaxCategory->FIVE_YEAR_CAPITAL_GAIN->as_int]);
    while (my $row = $sth->fetchrow_arrayref) {
	push(@$realm_ids, $row->[0]);
    }

    my($visited) = {};
    foreach my $realm_id (@$realm_ids) {
	next if $visited->{$realm_id};
	$req->set_realm($realm_id);
	print("\t", $req->get('auth_realm')->get('owner')->get('name'), "\n");
	Bivio::Biz::Accounting::AllocationCache->new($req)->invalidate($date);
	$visited->{$realm_id} = 1;
    }
    return;
}

# _upgrade_expand_db_constraints(Bivio::Agent::Request req)
#
# Drops and readds tax category constraints.
#
sub _upgrade_expand_db_constraints {
    my($req) = @_;
    print("expanding tax_category constraints\n");
    _drop_constraints('entry_t', 'tax_category');
    _drop_constraints('member_allocation_t', 'tax_category');
    _do_sql('
ALTER TABLE entry_t modify tax_category not null
/
ALTER TABLE entry_t
  add constraint entry_t9
  check (tax_category between 1 and 15)
/
ALTER TABLE member_allocation_t modify tax_category not null
/
ALTER TABLE member_allocation_t
  add constraint member_allocation_t5
  check (tax_category between 1 and 15
  or tax_category = 100)
/
');

    return;
}

# _upgrade_fix_expense_taxes(Bivio::Agent::Request req) : array_ref
#
# Fixes tax category for charity and margin interest.
# Returns the realms affected.
#
sub _upgrade_fix_expense_taxes {
    my($req) = @_;
    print("fixing tax category for charity and margin interest\n");
    use Bivio::Societas::Biz::Model::ExpenseCategory;
    use Bivio::Type::TaxCategory;

    my($entry) = Bivio::Biz::Model->new($req, 'Entry');
    my($sth) = Bivio::SQL::Connection->execute('
        SELECT expense_info_t.realm_id, expense_info_t.entry_id,
            expense_category_t.name
        FROM expense_info_t, expense_category_t
        WHERE expense_info_t.expense_category_id
            =expense_category_t.expense_category_id
        AND expense_category_t.name IN (?,?,?,?)
        ORDER BY expense_info_t.realm_id',
	['Margin Interest', Bivio::Societas::Biz::Model::ExpenseCategory
	    ->get_charitable_names]);
    my($result) = {};

    while (my $row = $sth->fetchrow_arrayref) {
	my($realm_id, $entry_id, $name) = @$row;
	$req->set_realm($realm_id);
	$entry->load({entry_id => $entry_id})->update({
	    tax_category => ($name eq 'Margin Interest'
		? Bivio::Type::TaxCategory->MARGIN_INTEREST
		: Bivio::Type::TaxCategory->CHARITABLE_CONTRIBUTION),
	});
	$result->{$realm_id} = 1;
    }
    return [keys(%$result)];
}

# _upgrade_fix_five_year_gains(Bivio::Agent::Request req)
#
# Audits sales with 5-year gains. This will reclassify it as LTCG.
#
sub _upgrade_fix_five_year_gains {
    my($req) = @_;
    print("upgrading 5-year sale gains\n");
    use Bivio::Biz::Accounting::InstrumentAudit;

    my($date) = Bivio::Type::Date->from_literal_or_die('1/1/2001');
    my($audit) = Bivio::Biz::Accounting::InstrumentAudit->new($req);
    my($sth) = Bivio::SQL::Connection->execute('
        SELECT DISTINCT realm_id
        FROM entry_t
        WHERE tax_category=?',
	[Bivio::Type::TaxCategory->FIVE_YEAR_CAPITAL_GAIN->as_int]);

    while (my $row = $sth->fetchrow_arrayref) {
	$req->set_realm($row->[0]);
	print("\t", $req->get('auth_realm')->get('owner')->get('name'), "\n");
	$audit->audit($date);
    }
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
