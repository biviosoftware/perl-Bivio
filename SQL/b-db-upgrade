#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;
my($VERSION) = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

b-db-upgrade - database upgrade

=head1 SYNOPSIS

b-db-upgrade

=head1 DESCRIPTION

B<b-db-upgrade> database upgrade.
This script is the home for database table or data modifications. It stores
a copy of the current version in the database to prevent rerunning the
script.

To install an upgrade, use the magic argument '_upgrade':

    b-db-upgrade _upgrade

To create a new upgrade script, replace the entire contents of the
_upgrade() method and check in the new version.

There is sometimes a lag between scripts installed on the production
system, so create other methods and "chain" them.

=cut

#=IMPORTS
use Bivio::Agent::Request;
use Bivio::Auth::Realm;
use Bivio::Auth::RealmType;
use Bivio::Biz::Accounting::Tax;
use Bivio::Biz::Model::DbUpgrade;
use Bivio::Biz::Model::RealmOwner;
use Bivio::IO::Config;
use Bivio::SQL::Connection;
use Bivio::ShellUtil;
use Bivio::Type::Date;
use Bivio::Type::DateInterval;
use Bivio::Type::DateTime;

#=VARIABLES
$| = 1;

sub main {
    my(@argv) = @_;

    # want to avoid accidentally running this script
    my($method) = @argv;
    _usage("missing or bad method")
	    unless $method && $method  =~ /^_upgrade/;

    my($req) = Bivio::Agent::Request->get_current_or_new();
    my($upgrade) = Bivio::Biz::Model::DbUpgrade->new($req);
    if ($upgrade->unauth_load(version => $VERSION)) {
	_usage("$VERSION already ran");
    }

    # Sometimes there may be multiple upgrades and they need to be installed at
    # different times (on test system).  Probably good to keep this flexibility
    # in the tool for now.
    &{\&{$method}}($req);

    # creates a completion entry in db to prevent re-running
    $upgrade->create({
	version => $VERSION,
	run_date_time => Bivio::Type::DateTime->now
    });
    Bivio::Agent::Task->commit($req);

    return 1;
}

main(@ARGV);

#=PRIVATE METHODS

# _add_column(string table, string column, string sql_type, string value)
#
# Adds a column to the database and sets the default value.  Add constraints or
# indices, add them after this call.
#
sub _add_column {
    my($table, $column, $type, $value) = @_;
    print "Adding $table.$column\n";
    _do_sql("
ALTER TABLE $table
    ADD $column $type
/
");
    return unless defined($value);

    # Insert default values
    print "Inserting default into $table.$column\n";
    _do_sql("
update $table set $column = $value
/");

    return;
}

# _disclaimer(string user) : string
#
# Returns a disclaimer for a particular person.
#
sub _disclaimer {
    my($celeb) = @_;
    return <<"EOF";
Disclaimer: statements are opinions expressed by $celeb.
These statements are not intended to replace professional
advice. When in doubt, follow the advice of your investment, tax or
legal advisors who are familiar with your particular circumstances.
EOF
}

# _do_sql(string sql) : statement
#
# Returns the last statement executed.
#
sub _do_sql {
    my($sql) = @_;
    my($statement);
    my($s) = '';
    foreach my $line (split(/\n/, $sql)) {
	# Skip comments and blanks
	next if $line =~ /^\s*--|^\s*$/;

	# Execute statement if '/' found
	if ($line =~ /^\s*\/\s*$/) {
	    $statement = Bivio::SQL::Connection->execute($s);
	    $s = '';
	    next;
	}

	# Build up statement
	$s .= $line."\n";
    }
    die("$s: left over statement") if $s;
    return $statement;
}

# _drop_column(string table, string column)
#
# Drops the column.
#
sub _drop_column {
    my($table, $column) = @_;
    print "Dropping $table.$column\n";
    _do_sql("
ALTER TABLE $table
    DROP COLUMN $column
/
");
    return;
}

# _drop_constraints(string table, string column) : int
#
# Drop all the constraints on a particular table and column.
# Returns number of constraints dropped.
#
sub _drop_constraints {
    my($table, $column) = map {uc($_)} @_;
    # Find all constraints on the table
    my($statement) = _do_sql(<<"EOF");
	    SELECT user_cons_columns.constraint_name
	      FROM user_cons_columns, user_constraints
	      WHERE user_cons_columns.column_name = '$column'
	      AND user_cons_columns.table_name = '$table'
	      AND user_constraints.constraint_name
	      = user_cons_columns.constraint_name
              /
EOF
    my(@constraints);
    while (my($name) = $statement->fetchrow_array) {
	push(@constraints, $name);
    }
    $statement->finish;

    # Drop the constraints
    foreach my $c (@constraints) {
	_do_sql("ALTER TABLE $table drop constraint $c
                /");
    }
    return int(@constraints);
}

# _init_realm_role(Bivio::Biz::Util::RealmRole rru, string perms)
#
# Accepts a configuration like in Biz::Util::RealmRole and sets for
# a particular club.
#
sub _init_realm_role {
    my($rru, $perms) = @_;
    $perms =~ s/\\//g;
    $perms =~ s/^.*b-realm-role.* edit /!/mg;
    foreach my $edit (split(/!/, $perms)) {
	next unless $edit;
	$rru->edit(split(' ', $edit));
    }
    return;
}

# _modify_column(string table, string column, string type)
#
# Change the type of the column.
#
sub _modify_column {
    my($table, $column, $type) = @_;
    _do_sql("
ALTER TABLE $table MODIFY $column $type
/");
    return;
}

# _sqlplus(string db_login, string actions) : string_ref
#
# Runs I<actions> in sqlplus with I<db_login>.
# Returns result of the execution.
#
# I<actions> will have a semicolon (;) appended to it.
#
# If any of I<actions> fails, will rollback and exit.
#
sub _sqlplus {
    my($db_login, $actions) = @_;
    my($res) = Bivio::ShellUtil::piped_exec(undef, 'su - oracle -c sqlplus',
            <<"EOF");
$db_login
set linesize 10000
set pagesize 10000
whenever sqlerror exit sql.sqlcode rollback
whenever oserror exit sql.sqlcode rollback
$actions;
disconnect
exit
EOF
    return $res;
}

# _upgrade(Bivio::Agent::Request req)
#
# Replace this method with the table/data manipulations.
#
sub _upgrade {
    my($req) = @_;
    _upgrade_fixup($req);
    _upgrade_add_basic_service_subscription($req);
    _upgrade_subscribed_taxes($req);
    _upgrade_create_bivio_buck($req);
    my($subscribers) = _upgrade_credit_current_subscribers($req);
    _upgrade_subscribe_free_trial($req, $subscribers);
    print("\n*** done ***\n");
    return;
}

# _upgrade_add_basic_service_subscription(Bivio::Agent::Request req)
#
# Expands the subscription type to include Basic Service and Free Trial.
#
sub _upgrade_add_basic_service_subscription {
    my($req) = @_;
    print("expanding ec_subscription_t.subscription_type\n");
    _drop_constraints('ec_subscription_t', 'subscription_type');

    _do_sql('
ALTER TABLE ec_subscription_t modify subscription_type not null
/
ALTER TABLE ec_subscription_t
  add constraint ec_subscription_t3
  check (subscription_type between 1 and 5)
/
');

    return;
}

# _upgrade_create_bivio_buck(Bivio::Agent::Request req)
#
# Creates bivio_buck_t.
#
sub _upgrade_create_bivio_buck {
    my($req) = @_;
    print("creating bivio_buck_t\n");
    _do_sql('
CREATE TABLE bivio_buck_t (
  realm_id NUMBER(18),
  ec_payment_id NUMBER(18),
  amount NUMBER(20,6)
)
  tablespace data_1m
  pctfree 5 pctused 90 initrans 2 storage (freelists 8)
/
ALTER TABLE bivio_buck_t
  add constraint bivio_buck_t1
  primary key(realm_id, ec_payment_id, amount)
  using index tablespace index_1m pctfree 0 initrans 4 storage (freelists 8)
/
ALTER TABLE bivio_buck_t
  add constraint bivio_buck_t2
  foreign key (ec_payment_id)
  references ec_payment_t(ec_payment_id)
/
CREATE INDEX bivio_buck_t3 on bivio_buck_t (
  realm_id
)
  tablespace index_1m
  pctfree 0 initrans 4 storage (freelists 8)
/
ALTER TABLE bivio_buck_t
  add constraint bivio_buck_t4
  foreign key (realm_id)
  references realm_owner_t(realm_id)
/
');
    return;
}

# _upgrade_credit_current_subscribers(Bivio::Agent::Request req) : hash_ref
#
# Give current subscribes 30 bivio bucks.
#
sub _upgrade_credit_current_subscribers {
    my($req) = @_;
    print("crediting current subscribers\n");

    my($buck) = Bivio::Biz::Model->new($req, 'BivioBuck');
#TODO: won't load without this...
    $req->put('auth_id' => 0);
    my($list) = Bivio::Biz::Model->new($req, 'AdmSubscriberList')->load_all;

    # need to guard against repeats
    my($names) = {};

    while ($list->next_row) {
	my($name) = $list->get('RealmOwner.name');
	next if $names->{$name};
	print("\t", $name, "\n");
	$names->{$name} = 1;

	$buck->create({
	    realm_id => $list->get('RealmOwner.realm_id'),
	    ec_payment_id => $list->get('ECPayment.ec_payment_id'),
	    amount => 30,
	})
	    unless $buck->unauth_load({
		realm_id => $list->get('RealmOwner.realm_id'),
		ec_payment_id => $list->get('ECPayment.ec_payment_id'),
		amount => 30,
	    });
    }
    return $names;
}

# _upgrade_fixup(Bivio::Agent::Request req)
#
# Just in case run before.  We'll drop all FREE_TRIAL, bivio_buck_t,
# and BASIC_SERVICE.
#
sub _upgrade_fixup {
    my($req) = @_;
    # just in case it has been run before
    my($sth) = Bivio::SQL::Connection->execute('
        DELETE FROM ec_subscription_t
        WHERE ec_subscription_t.subscription_type=?',
	[Bivio::Type::ECSubscription->FREE_TRIAL->as_int]);
    if ($sth->rows) {
	print("cleaning up prior run\n");

	_do_sql('
DROP TABLE bivio_buck_t
/
');
	Bivio::SQL::Connection->execute('
           DELETE FROM ec_payment_t
           WHERE ec_subscription_id in (
               SELECT ec_subscription_id FROM ec_subscription_t
               WHERE ec_subscription_t.subscription_type=?)',
	   [Bivio::Type::ECSubscription->BASIC_SERVICE->as_int]);
	Bivio::SQL::Connection->execute('
           DELETE FROM ec_subscription_t
           WHERE ec_subscription_t.subscription_type=?',
	   [Bivio::Type::ECSubscription->BASIC_SERVICE->as_int]);
    }
    return;
}

# _upgrade_subscribe_free_trial(Bivio::Agent::Request req, hash_ref subscribers)
#
# Subscribes all clubs to a free trial period.
#
sub _upgrade_subscribe_free_trial {
    my($req, $subscribers) = @_;
    print("subscribing all clubs to free trial\n");

    use Bivio::Type::RealmName;
    my($d) = Bivio::Type::Date->from_sql_value(
	'realm_owner_t.creation_date_time');

    my($sth) = Bivio::SQL::Connection->execute("
        SELECT realm_owner_t.realm_id,
            $d,
            realm_owner_t.name
        FROM realm_owner_t, club_t
        WHERE realm_owner_t.realm_id=club_t.club_id
        AND realm_owner_t.name NOT LIKE ?
        ORDER BY realm_owner_t.name",
	['%'.Bivio::Type::RealmName->DEMO_CLUB]);

    my($now) = Bivio::Type::Date->now;
    my($dec_31_2001) = Bivio::Type::Date->from_literal('12/31/2001');
    my($subscription) = Bivio::Biz::Model->new($req, 'ECSubscription');

    while (my $row = $sth->fetchrow_arrayref) {
	my($realm_id, $date, $name) = @$row;
	next if $subscribers->{$name};
	print("\t", $name, "\n");

	# all free trials start now, end on Dec 31. 2001
	$subscription->start_free_trial($realm_id, $date)->update({
	    start_date => $now,
	    end_date => $dec_31_2001,
	});
    }
    return;
}

# _upgrade_subscribed_taxes(Bivio::Agent::Request req)
#
# Adds TAXES permission to any club which has an active subscription.
#
sub _upgrade_subscribed_taxes {
    my($req) = @_;
    use Bivio::Biz::Util::RealmRole;
    use Bivio::Type::ECSubscription;

    print("updating TAXES permissions for subscribed clubs\n");
    my($role_util) = Bivio::Biz::Util::RealmRole->new();

    my($sth) = Bivio::SQL::Connection->execute('
        SELECT UNIQUE(realm_owner_t.name)
        FROM realm_owner_t, ec_subscription_t
        WHERE realm_owner_t.realm_id=ec_subscription_t.realm_id
        AND SYSDATE BETWEEN
           ec_subscription_t.start_date
           AND ec_subscription_t.end_date
        AND ec_subscription_t.subscription_type != ?
        ORDER BY realm_owner_t.name',
	[Bivio::Type::ECSubscription->FREE_TRIAL->as_int]);

    while (my $row = $sth->fetchrow_arrayref) {
	my($name) = $row->[0];
	print("\t", $name, "\n");
	$role_util->set_realm_and_user($name);
	$role_util->edit('ADMINISTRATOR', '+TAXES');
	$role_util->edit('ACCOUNTANT', '+TAXES');
    }
    return;
}

# _usage(array message)
#
# Print a message and terminate
sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 _upgrade
EOF
    exit(1);
}

=head1 SEE ALSO

Bivio::IO::Config

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
