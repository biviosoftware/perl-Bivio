# Copyright (c) 2008 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request();
my($now) = Date('20080301');
my($days) = [map(Date()->to_file_name(Date()->add_days($now, $_)), 0 .. 40)];
my($tmp) = 'Backup2';
system("chmod -R a+rxw $tmp 2>/dev/null; rm -rf $tmp");
Bivio::IO::File->mkdir_p($tmp);
foreach my $day (@$days) {
    my($kb) = 1;
    foreach my $d (qw{
        x1/d1/s1
        x2/d1/s1
        x2/d1/d3/s1
	x2/s1
	x3/s1
        1024
	x1/b1
        x1/d1/d2/b1
        x2/d1/b1
        x2/d2/d3/b1
    }) {
	if ($d =~ /^\d+$/) {
	    $kb = $d;
	    next;
	}
	my($src) = "$tmp/mirror/link/$day/$d";
	IO_File()->mkdir_parent_only($src);
	system("dd if=/dev/zero of=$src bs=1024 count=$kb > /dev/null 2>&1");
    }
}
[
    class() => [
	{
	    method => 'archive_mirror_link',
	    compute_params => sub {
		my(undef, $params) = @_;
		return [$tmp, $params->[0], 100];
	    },
	    check_return => sub {
		my($date) = shift->get('params')->[1];
		my($d) = $date =~ /01$/
		    ? "$tmp/archive/$date"
		    : grep($date eq $_,
		        map("2008$_", qw(0302 0309 0316 0323 0330 0406)))
		    ? "$tmp/weekly/$date"
		    : 0;
		unless ($d) {
		    assert_eval("! -d '$tmp/archive/$date'");
		    assert_eval("! -d '$tmp/weekly/$date'");
		    return 1;
		}
		assert_eval("-d '$d'");
		assert_eval("! -f '$d/x2/d1/d3.tgz'");
		assert_eval("! -f '$d/..tgz'");
		foreach my $x (
		    [qw(x1 x1/b1)],
		    [qw(x1/d1 x1/d1/s1)],
		    [qw(x1/d1/d2 x1/d1/d2/b1)],
		    [qw(x2 x2/s1)],
		    [qw(x2/d1 x2/d1/d3 x2/d1/d3/s1 x2/d1/b1 x2/d1/s1)],
		    [qw(x2/d2)],
		    [qw(x2/d2/d3 x2/d2/d3/b1)],
		    [qw(x3 x3/s1)],
		) {
		    assert_equals(
			join('', sort(map(/[dx]\d+$/ ? "$_/\n" : "$_\n", @$x))),
			scalar(`tar tzf $d/$x->[0].tgz 2>&1`),
		    );
		}
		return 1;
	    },
	} => [
	    map(($_ => []), @$days),
	],
    ],
];
