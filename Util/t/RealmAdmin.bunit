# Copyright (c) 2007-2023 bivio Software, Inc.  All Rights Reserved.
# $Id$
ShellUtil();
my($lockout_count) = 5;
config({
    'Bivio::Biz::Model::RealmOwner' => {
        lockout_login_failure_count => $lockout_count,
    },
});
my($uid);
model('UserRealmSubscription')->unauth_delete({
    realm_id => realm_id('site-reports'),
    user_id => realm_id('crm_tech1'),
});
[
    [qw(-realm general users)] => qr{^multi_role_user.*\nroot\b}s,
    [qw(-realm general users administrator)] => qr{^root\b}s,
    [qw(to_id demo)] => unauth_model(RealmOwner => {name => 'demo'})->get('realm_id'),
    [to_id => 'Demo User'] => unauth_model(RealmOwner => {name => 'demo'})->get('realm_id'),
    [qw(-realm site-reports -user crm_tech1 leave_user)] => not_die(),
    [qw(-realm site-reports users)] => sub {
        my(undef, $actual) = @_;
        assert_not_equals(qr{crm_tech1}, $actual->[0]);
        return 1;
    },
    [qw(-realm site-reports -user crm_tech1 join_user member)] => not_die(),
    [qw(-realm site-reports users)] => qr{crm_tech1},
    [qw(-realm site-reports -user crm_tech1 join_user member)] => not_die(),
    [qw(-realm site-reports -user crm_tech1 join_user mail_recipient)] => sub {
        assert_equals(1, model('UserRealmSubscription')->unauth_load({
            realm_id => realm_id('site-reports'),
            user_id => realm_id('crm_tech1'),
        }));
        return 1;
    },
    [qw(-realm site-reports -user crm_tech1 leave_user)] => not_die(),
    [qw(-realm site-reports users)] => sub {
        my(undef, $actual) = @_;
        assert_not_equals(qr{crm_tech1}, $actual->[0]);
        return 1;
    },
    inline_case(sub {
        $uid = ShellUtil_TestUser()->create(random_realm_name());
        my($uid2) = ShellUtil_TestUser()->create(random_realm_name());
        class()->main(-realm => $uid, -user => $uid2, qw(join_user GUEST));
        return;
    }),
    sub {[-realm => $uid, 'delete_auth_realm_and_users']} => not_die(),
    [qw(-realm fourem -user root unsubscribe_user_from_realm)] => sub {
        unauth_model(UserRealmSubscription => {
            user_id => realm_id('root'),
            realm_id => realm_id('fourem'),
            is_subscribed => 0,
        });
        return 1;
    },
    [qw(-realm fourem -user root subscribe_user_to_realm)] => sub {
        unauth_model(UserRealmSubscription => {
            user_id => realm_id('root'),
            realm_id => realm_id('fourem'),
            is_subscribed => 1,
        });
        return 1;
    },
    # This would be cleaner if there was a `lock_login` method or util, but that isn't really needed
    inline_case(sub {
        $uid = ShellUtil_TestUser()->create(random_realm_name());
        my($ro) = unauth_model(RealmOwner => {realm_id => $uid});
        $ro->update({login_failure_count => $lockout_count});
        return $ro->is_locked;
    }),
    sub {[-realm => $uid, -user => $uid, 'unlock_login']} => sub {
        return !unauth_model(RealmOwner => {realm_id => $uid})->is_locked;
    },
];
