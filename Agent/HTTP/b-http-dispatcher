#!perl -w
# Copyright (c) 1999-2001 bivio Inc.  All rights reserved.
# $Id$
use strict;

=head1 NAME

b-http-dispatcher - starts Apache running Bivio::Agent::HTTP::Dispatcher

=head1 RELEASE SCOPE

Societas

=head1 SYNOPSIS

b-http-dispatcher [--config] [-n] [server-name]

=head1 DESCRIPTION

B<b-http-dispatcher> is used to run C<httpd> in single user mode
with a dynamically created configuration file.

B<This is a bad example to copy.>

Logs are written to stdout.

=head1 OPTIONS

=over 4

=item -background

Execute in background (not -X) mode.  KeepAlives will be turned on.

=item -n

Don't execute, just show configuration file generated and
command invocation string.

=item --[server-name.]port=(number|name)

The port to use (required in config file or on command line).

=item --[server-name.]handler=package

The package name of the handler to use.  Defaults to
L<Bivio::Agent::HTTP::Dispatcher|Bivio::Agent::HTTP::Dispatcher>.

=back

=cut

#=IMPORTS
use Bivio::IO::Config;
use Bivio::IO::Alert;
use Bivio::IO::ClassLoader;
use Cwd ();
use Sys::Hostname ();

#=VARIABLES
my($_HTTPD);
# Search for local install first
my(@_HTTPD) = qw(
    /usr/local/apache/bin/httpd
    /usr/sbin/httpd
);
foreach my $h (@_HTTPD) {
    if (-x $h) {
	$_HTTPD = $h;
	last;
    }
}
die("no httpd found; tried @_HTTPD") unless $_HTTPD;
Bivio::IO::Config->register({
    Bivio::IO::Config->NAMED => {
	'port' => Bivio::IO::Config->REQUIRED,
	'handler' => 'Bivio::Agent::HTTP::Dispatcher',
    },
});
my($_DYNAMIC_MODULES) = <<'EOF';
LoadModule env_module         modules/mod_env.so
LoadModule config_log_module  modules/mod_log_config.so
LoadModule mime_module        modules/mod_mime.so
LoadModule status_module      modules/mod_status.so
LoadModule info_module        modules/mod_info.so
LoadModule rewrite_module     modules/mod_rewrite.so
LoadModule setenvif_module    modules/mod_setenvif.so
LoadModule perl_module        modules/libperl.so

#  Reconstruction of the complete module list from all available modules
#  (static and shared ones) to achieve correct module execution order.
#  [WHENEVER YOU CHANGE THE LOADMODULE SECTION ABOVE UPDATE THIS, TOO]
ClearModuleList
AddModule mod_env.c
AddModule mod_log_config.c
AddModule mod_mime.c
AddModule mod_status.c
AddModule mod_info.c
AddModule mod_rewrite.c
AddModule mod_so.c
AddModule mod_setenvif.c
AddModule mod_perl.c
EOF

sub main {
    my(@argv) = @_;
    my($execute) = 1;
    my($background) = 0;
    my($server_name) = undef;
    local($_);
    while (@argv) {
	$_ = shift(@argv);
	/^-n/ && ($execute = 0, next);
	/^-(?:b|bg|background)/ && ($background = 1, next);
	/^-/ && &_usage("unknown option \"$_\"");
	defined($server_name) && &_usage('too many arguments');
	$server_name = $_;
    }
    my($cfg) = Bivio::IO::Config->get($server_name);
    if ($ENV{PERLLIB}) {
	my($httpd) = $ENV{PERLLIB} . '../external/apache/src/httpd';
	-x $httpd && ($_HTTPD = $httpd);
    }
    if ($execute) {
        -f 'httpd.pid' && (kill('TERM', `cat httpd.pid`), sleep(5));
	CORE::system(
	    'rm -f httpd.lock.* httpd.pid httpd[0-9]*.conf httpd*.sem modules');
	&symlink('.', 'logs');
	# Need for RH7.1, can ignore otherwise
	&symlink('/etc/httpd/modules', 'modules');
    }
    else {
	print <<"EOF";
rm -f httpd.lock.* httpd.pid httpd[0-9]*.conf httpd*.sem
ln -s . logs
EOF
    }
    my($log) = $background ? 'stderr.log' : '|cat';
    my($keepalive) = $background ? 'on' : 'off';
    my($port) = $cfg->{port};
    my($user) = getpwuid($>) || $>;
    my($group) = getgrgid($)) || $);
    my($pwd) = &Cwd::cwd();
    my($hostname) = Sys::Hostname::hostname();
    my($handler) = $cfg->{handler};
    my($perl_module) = $handler =~ /^\+/ ? "" : "PerlModule $cfg->{handler}";
    my(@start_mode) = $background ? () : ('-X');
    my($bconf) = $ENV{'BCONF'}
	? "PerlSetEnv BCONF $ENV{'BCONF'}" : '';
    my($hostip) = sprintf("%d.%d.%d.%d",
            unpack('C4', (gethostbyname($hostname))[4]));

    my($facades) = '';
    # TIGHT COUPLING with Bivio::UI::Facade
    foreach my $facade (@{_get_facade_uri_list()}) {
	$facades .= <<"EOF";
	    <VirtualHost $hostip:$port>
		ServerName $facade.$hostname
		RewriteEngine On
		RewriteLog rewrite.log
		RewriteLogLevel 0

		RewriteRule ^(.*) /*$facade\$1 [NS,PT]

		SetHandler perl-script
		PerlHandler $handler
	    </VirtualHost>
EOF
    }

    # We need to specify dynamic modules if it is the generic install
    my($modules) = $_HTTPD eq '/usr/sbin/httpd' ? $_DYNAMIC_MODULES : '';

    local($_);
    my($conf) = $execute ? "httpd$$.conf" : "&STDOUT";
    open(OUT, ">$conf") || die("open $conf: $!");
    while (<DATA>) {
	# Yup, want an extra "e" to get double interpolation.  Kewl, huh?
	s/<(\$\w+)>/$1/eeg;
    }
    continue {
	(print OUT) || die("write $conf: $!");
    }
    close(OUT) || die("close $conf: $!");
    close(DATA);
    if ($execute) {
	print STDERR "Starting: $_HTTPD @start_mode -d $pwd -f $pwd/$conf\n";
	print STDERR "tail -f stderr.log\n" if $background;
	exec("$_HTTPD", @start_mode, '-d', $pwd, '-f', "$pwd/$conf");
	die("$_HTTPD: $!");
    }
    else {
	print "Would start: $_HTTPD -X -d $pwd -f $pwd/$conf\n";
    }
}

sub symlink {
    my($file, $link) = @_;
    -e $link || symlink($file, $link) || die("symlink($file, $link): $!");
}

# We don't do dynamic reconfiguration
sub handle_config {
}

# _get_facade_uri_list()
#
# Returns list of facade uris by reaching inside the Facades.
#
sub _get_facade_uri_list {
    my(@files, @uri);

    # The filter is used as a hack to load, just get the names of the uris,
    # but return false so nothing loads.
    Bivio::IO::ClassLoader->map_require_all('Facade', sub {
	my($class, $file) = @_;
	push(@files, $file);
	return 0;
    });

    foreach my $file (@files) {
	open(IN, $file) || next;
	# Find the uri if set, otherwise the package base name in lower case.
	my($uri) = $file;
	$uri =~ s/.*\/(\w+)\.pm$/\L$1/;
	my($uri2) = grep(s/^\s*uri\s*=>\s*['"]([^'"]+).*\n/\L$1/, <IN>);
	push(@uri, $uri2 || $uri);
    }
    close(IN);
    return \@uri;
}

sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 [--config] [-n] [-background] [server-name]
EOF
    exit(1);
}

&main(@ARGV);

=head1 ENVIRONMENT

=over 4

=item $PERLLIB

Must point to the appropriate development directory if you are
starting the server for testing your own copy.  See L<"FILES">.

=back

=head1 FILES

=over 4

=item httpd.lock.*

is removed and rewritten with new pid

=item httpd.pid

is removed and rewritten with new pid

=item httpd[0-9]*.conf

is removed and rewritten with new pid

=item $PERLLIB/../external/apache/src/httpd

binary to be used if it exists and is executable

=back

=head1 SEE ALSO

Bivio::IO::Config, Bivio::Agent::HTTP::Dispatcher, httpd, mod_perl

=head1 COPYRIGHT

Copyright (c) 1999-2001 bivio Inc.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
__DATA__
#
# This file was dynamically generated by <$0>
#
ResourceConfig /dev/null
AccessConfig /dev/null

<$modules>

Listen <$port>
User <$user>
Group <$group>
ServerAdmin <$user>

PerlWarn on
# Can't be on and use PERLLIB.
PerlFreshRestart off
<$bconf>
<$perl_module>
#RJN: This doesn't work for some reason
PassEnv ORACLE_HOME
PassEnv DBI_USER
PassEnv DBI_PASS
PassEnv ORACLE_SID
PerlPassEnv ORACLE_HOME
PerlPassEnv DBI_USER
PerlPassEnv DBI_PASS
PerlPassEnv ORACLE_SID

Timeout 60
KeepAlive <$keepalive>
MinSpareServers 1
MaxSpareServers 4
StartServers 1
MaxClients 4
MaxRequestsPerChild 100000
LimitRequestBody 4194304

ServerRoot <$pwd>
# This is technically incorrect.
DocumentRoot <$pwd>/files/www/plain
PidFile httpd.pid
ErrorLog <$log>
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel debug
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
CustomLog <$log> combined
TypesConfig /etc/mime.types
DefaultType text/plain
LockFile httpd.lock

<Directory />
    AllowOverride None
    Options FollowSymLinks
</Directory>

ErrorDocument 502 /m/maintenance.html
ErrorDocument 413 /m/upload-too-large.html

<Location /s>
    SetHandler perl-script
    PerlHandler Apache::Status
</Location>

NameVirtualHost <$hostip>:<$port>

<VirtualHost <$hostip>:<$port> 127.0.0.1:<$port>>
    ServerName <$hostname>
    SetHandler perl-script
    PerlHandler <$handler>
</VirtualHost>

<$facades>

BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0
