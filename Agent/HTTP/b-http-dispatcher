#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;

=head1 NAME

b-http-dispatcher - starts Apache running Bivio::Agent::HTTP::Dispatcher

=head1 SYNOPSIS

b-http-dispatcher [--config] [-n] [server-name]

=head1 DESCRIPTION

B<b-http-dispatcher> is used to run L<httpd|httpd> in single user mode
with a dynamically created configuration file.

Logs are written to stdout.

=head1 OPTIONS

=over 4

=item -background

Execute in background (not -X) mode.  KeepAlives will be turned on.

=item -n

Don't execute, just show configuration file generated and
command invocation string.

=item --[server-name.]port=(number|name)

The port to use (required in config file or on command line).
NOTE: if you are using the configuration generated by
L<b-societas-start|b-societas-start>, you will need to
use B<--http.port=(number|name)> form.

=item --[server-name.]handler=package

The package name of the handler to use.  Defaults to
L<Bivio::Agent::HTTP::Dispatcher|Bivio::Agent::HTTP::Dispatcher>.

=back

=cut

#=IMPORTS
use Bivio::IO::Config;
use Bivio::IO::Alert;
use Cwd ();
use Sys::Hostname;

#=VARIABLES
my($_APACHE_HOME) = '/usr/local/apache';
my($_HTTPD) = $_APACHE_HOME . '/bin/httpd';
Bivio::IO::Config->register({
    Bivio::IO::Config->NAMED => {
	'port' => Bivio::IO::Config->REQUIRED,
	'handler' => 'Bivio::Agent::HTTP::Dispatcher',
    },
});

sub main {
    my(@argv) = @_;
    Bivio::IO::Config->initialize(\@argv);
    my($execute) = 1;
    my($background) = 0;
    my($server_name) = undef;
    local($_);
    while (@argv) {
	$_ = shift(@argv);
	/^-n/ && ($execute = 0, next);
	/^-(?:b|bg|background)/ && ($background = 1, next);
	/^-/ && &_usage("unknown option \"$_\"");
	defined($server_name) && &_usage('too many arguments');
	$server_name = $_;
    }
    my($cfg) = Bivio::IO::Config->get($server_name);
    if ($ENV{PERLLIB}) {
	my($httpd) = $ENV{PERLLIB} . '../external/apache/src/httpd';
	-x $httpd && ($_HTTPD = $httpd);
    }
    if ($execute) {
        -f 'httpd.pid' && kill('TERM', `cat httpd.pid`);
	system('rm -f httpd.lock.* httpd.pid httpd[0-9]*.conf httpd*.sem');
	system('cvs checkout html; cd html/societas; make INSTALLDIR=../')
		unless -f 'html/index.html';
	&symlink('.', 'logs');
    }
    else {
	print <<"EOF";
rm -f httpd.lock.* httpd.pid httpd[0-9]*.conf httpd*.sem
cvs checkout html/i
ln -s . logs
EOF
    }
    my($log) = $background ? 'stderr.log' : '|cat';
    my($keepalive) = $background ? 'on' : 'off';
    my($port) = $cfg->{port};
    my($user) = getpwuid($>) || $>;
    my($group) = getgrgid($)) || $);
    my($pwd) = &Cwd::cwd();
    my($hostname) = hostname;
    my($handler) = $cfg->{handler};
    my(@start_mode) = $background ? () : ('-X');
    my($bivio_conf) = $ENV{'BIVIO_CONF'}
	    ? "PerlSetEnv BIVIO_CONF $ENV{'BIVIO_CONF'}" : '';
    my($hostip) = sprintf("%d.%d.%d.%d",
            unpack('C4', (gethostbyname($hostname))[4]));
    local($_);
    my($conf) = $execute ? "httpd$$.conf" : "&STDOUT";
    open(OUT, ">$conf") || die("open $conf: $!");
    while (<DATA>) {
	# Yup, want an extra "e" to get double interpolation.  Kewl, huh?
	s/<(\$\w+)>/$1/eeg;
    }
    continue {
	(print OUT) || die("write $conf: $!");
    }
    close(OUT) || die("close $conf: $!");
    close(DATA);
    if ($execute) {
	print STDERR "Starting: $_HTTPD @start_mode -d $pwd -f $pwd/$conf\n";
	print STDERR "tail -f stderr.log\n" if $background;
	exec("$_HTTPD", @start_mode, '-d', $pwd, '-f', "$pwd/$conf");
	die("$_HTTPD: $!");
    }
    else {
	print "Would start: $_HTTPD -X -d $pwd -f $pwd/$conf\n";
    }
}

sub symlink {
    my($file, $link) = @_;
    -e $link || symlink($file, $link) || die("symlink($file, $link): $!");
}

# We don't do dynamic reconfiguration
sub handle_config {
}

sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 [--config] [-n] [-background] [server-name]
EOF
    exit(1);
}

&main(@ARGV);

=head1 ENVIRONMENT

=over 4

=item $PERLLIB

Must point to the appropriate development directory if you are
starting the server for testing your own copy.  See L<"FILES">.

=back

=head1 FILES

=over 4

=item html/index.html

=item html/societas

The command "cvs checkout html/societas" will be executed in the current
directory and the static site will be built,
if the directory doesn't already exist.

=item httpd.lock.*

is removed and rewritten with new pid

=item httpd.pid

is removed and rewritten with new pid

=item httpd[0-9]*.conf

is removed and rewritten with new pid

=item $PERLLIB/../external/apache/src/httpd

binary to be used if it exists and is executable

=back

=head1 SEE ALSO

Bivio::IO::Config, Bivio::Agent::HTTP::Dispatcher, httpd, mod_perl

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
__DATA__
#
# This file was dynamically generated by <$0>
#
ResourceConfig /dev/null
AccessConfig /dev/null

Listen <$port>
User <$user>
Group <$group>
ServerAdmin <$user>

PerlWarn on
# Can't be on and use PERLLIB.
PerlFreshRestart off
<$bivio_conf>
PerlModule <$handler>
#RJN: This doesn't work for some reason
PassEnv ORACLE_HOME
PassEnv DBI_USER
PassEnv DBI_PASS
PassEnv ORACLE_SID
PerlPassEnv ORACLE_HOME
PerlPassEnv DBI_USER
PerlPassEnv DBI_PASS
PerlPassEnv ORACLE_SID

Timeout 60
KeepAlive <$keepalive>
MinSpareServers 1
MaxSpareServers 4
StartServers 1
MaxClients 4
MaxRequestsPerChild 1000
LimitRequestBody 4194304

ServerRoot <$pwd>
DocumentRoot <$pwd>/html
PidFile httpd.pid
ErrorLog <$log>
# Possible values include: debug, info, notice, warn, error, crit,
# alert, emerg.
LogLevel debug
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
CustomLog <$log> combined
TypesConfig /etc/mime.types
DefaultType text/plain
LockFile httpd.lock

<Directory />
    AllowOverride None
    Options FollowSymLinks
</Directory>

<Location /modperl-status>
    SetHandler perl-script
    PerlHandler Apache::Status
</Location>

NameVirtualHost <$hostip>:<$port>

<VirtualHost <$hostip>:<$port> 127.0.0.1:80>
    ServerName <$hostname>
    <LocationMatch "^/(index.html|[a-zA-Z0-9_\-]{2,}($|/))">
        SetHandler perl-script
        PerlHandler <$handler>
    </LocationMatch>
</VirtualHost>

<VirtualHost <$hostip>:<$port>>
    ServerName selftrade.<$hostname>
    RewriteEngine On
    RewriteLog rewrite.log
    RewriteLogLevel 0

    RewriteCond <$pwd>/html/i/selftrade/$1 -f
    RewriteRule ^/i/(.+) /i/selftrade/$1  [NS,L]
    RewriteRule ^/./ - [NS,L]
    RewriteRule ^(.*) /selftrade$1 [NS,PT]

    <LocationMatch "^/(index.html|[a-zA-Z0-9_\-]{2,}($|/))">
        SetHandler perl-script
        PerlHandler <$handler>
    </LocationMatch>
</VirtualHost>

BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0
