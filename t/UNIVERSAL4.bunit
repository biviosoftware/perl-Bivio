# Copyright (c) 2008 bivio Software, Inc.  All Rights Reserved.
# $Id$
options({
    create_object => sub {
	my(undef, $params) = @_;
	return class($params->[0]);
    },
});
my($s1) = class('Bivio::t::UNIVERSAL::Super1')->code_ref_for_subroutine('s1');
my($after);
[
    'Bivio::t::UNIVERSAL::Super2' => [
	code_ref_for_subroutine => [
	    s1 => [undef],
	],
	code_ref_for_method => [
	    s1 => [$s1],
	    no_such_method => [],
	],
	super_for_method => [
	    s1 => [$s1, 'Bivio::t::UNIVERSAL::Super1'],
	    no_such_method => DIE(),
	],
	unsafe_super_for_method => [
	    no_such_method => [],
	],
    ],
    'Bivio::t::UNIVERSAL::Super3' => [
	s1 => 'Super3',
    ],
    'Bivio::t::UNIVERSAL::Super2' => [
	s1 => 'Super1',
    ],
    {
	object => 'Bivio::t::UNIVERSAL::Super2',
	compute_return => sub {
	    my(undef, $actual) = @_;
	    my($after2) = $after;
	    $after = undef;
	    return [$actual, $after2];
	},
    } => [
	call_and_do_after => [
	    [sub {return @{[(shift, 5, 9)]}}, ['a'], sub {$after = 'x'}] => [[qw(a 5 9)], 'x'],
	    [boolean => ['a'], sub {$after = 'x'}] => [[1], 'x'],
	    [boolean => [], sub {$after = 'x'}] => [[0], 'x'],
	],
	{
	    method => 'call_and_do_after',
	    want_scalar => 1,
	} => [
	    [sub {return @{[(shift, 5, 9)]}}, ['a'], sub {$after = 'x'}] => [[3], 'x'],
	],
	{
	    method => 'call_and_do_after',
	    want_void => 1,
	} => [
	    [sub {return @{[(shift, 5, 9)]}}, ['a'], sub {$after = 'x'}] => [[], 'x'],
	],
    ],
];
