# Copyright (c) 2007 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request();

sub _reverse_join {
    my($v1, $v2) = @_;
    return $v2 . $v1;
};
my($do_by_two) = 0;
[
    class() => [
	max_number => [
	    [] => [undef],
	    [1] => 1,
	    [1, 2] => 2,
	],
	{
	    method => 'do_by_two',
	    compute_return => sub {[$do_by_two]},
	    compute_params => sub {
		my(undef, $params) = @_;
		return [sub {
		    my($x, $y) = @_;
		    return 0
			unless $x;
	            $do_by_two = $y;
		    return 1;
		}, [@$params]];
	    }
	} => [
	    [1, 'a'] => 'a',
	    [1, 'a', 0, 'b'] => 'a',
	    [1, 'a', 1, 'b'] => 'b',
	],
	map_together => [
	    [sub {(shift(@_) || '') . shift(@_)}, [qw(a b)], [qw(1 2 3)]]
		=> [[qw(a1 b2 3)]],
	],
	req => [
	    [] => [req()],
	    is_production => 0,
	],
	iterate_reduce => [
	    [sub {
		 my($v1, $v2) = @_;
		 return $v1 * $v2;
	     }, [qw(1 2 3 4 5)]] => 120,
	    [\&_reverse_join, [qw(a b c d e)]] => 'edcba',
	    [\&_reverse_join, []] => [undef],
	    [\&_reverse_join, ['x']] => 'x',
	    [\&_reverse_join, ['y', 'x'], 'z'] => 'xyz',
	    [\&_reverse_join, [], 'z'] => 'z',
	],
    ],
    sub {req()} => [
	req => [
	    [] => [req()],
	    is_production => 0,
	],
    ],
];
