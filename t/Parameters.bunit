# Copyright (c) 2009 bivio Software, Inc.  All Rights Reserved.
# $Id$
Type();
my($simple) = class()->new([
    'p1',
    [qw(gender Gender), Type_Gender()->FEMALE],
    [qw(*repeat Integer), sub {99}],
]);
my($error);
[
    new => [
	[['param1']] => 'Parameters(param1)',
	[['Boolean']] => 'Parameters(Boolean)',
	[['+Boolean']] => 'Parameters(+Boolean)',
	[[[qw(?bool Boolean)], '*String']] => 'Parameters(?bool,*String)',
	[[qw(+Boolean +String)]] => qr{Boolean: only the last.*repeat},
	[[qw(?Boolean +String)]] => qr{String: param must be optional},
	[['NoSuchType']] => qr{not.found}i,
    ],
    parameters => [
	[['value1'], $simple] => [class() => {
	    p1 => 'value1',
	    gender => Type_Gender()->FEMALE,
	    repeat => [99],
	}],
	[[qw(v1 male 1 2 3)], $simple] => [class() => {
	    p1 => 'v1',
	    gender => Type_Gender()->MALE,
	    repeat => [1, 2, 3],
	}],
	sub {[[qw(v1 not-gender)], $simple, $error = {}]} => sub {
	    assert_equals({
		name => 'gender',
		value => 'not-gender',
		error => Bivio_TypeError()->NOT_FOUND,
	    }, $error);
	    return 1;
	},
    ],
];
