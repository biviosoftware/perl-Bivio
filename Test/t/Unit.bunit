# Copyright (c) 2005 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request();
options({
    compute_params => sub {
	my(undef, $params, $method) = @_;
	return $method eq 'builtin_email' ? ['hello'] : $params;
    },
});
req()->set_realm('btest_read');
[
    class() => [
	simple_package_name => 'Unit',
	simple_package_name => not_die(),
	inline_case(sub {
            my($case, $self) = @_;
	    die('Not a Bivio::Test::Case')
		unless $case->isa('Bivio::Test::Case');
	    die('Not a Bivio::Test')
		unless $self->isa('Bivio::Test');
	    return;
	}),
	builtin_create_user => [
	    'unit_bunit' => sub {
		foreach my $c (
		    [qw(unit_bunit auth_realm owner name)],
		    [qw(unit_bunit auth_user name)],
		) {
		    assert_equals(shift(@$c), req()->get_nested(@$c));
		}
		return 1;
	    },
	],
	builtin_email => qr{hello\@},
	builtin_model => [
	    RealmOwner => sub {$_[1]->[0]->is_loaded ? 0 : 1},
	    [RealmOwner => {name => 'fourem'}, [{display_name => qr{forum}i}]]
		=> not_die(),
	    [RealmOwner => {name => 'not found'}, []] => not_die(),
	    [RealmOwner => {name => 'not found'}] => MODEL_NOT_FOUND(),
	    [RealmUserList => {
		auth_id => model(
		    RealmOwner => {name => 'btest_read'},
		)->get('realm_id'),
	    }] => sub {
		my($case, $actual) = @_;
		$case->actual_return([$actual->[0]->get('RealmUser.role')]);
		return [Bivio::Auth::Role->ADMINISTRATOR];
	    },
	    [RealmUserList => {
		auth_id => model(
		    RealmOwner => {name => 'btest_read'},
		)->get('realm_id'),
	    }, []] => DIE(),
	    [RealmUserList => {
		auth_id => model(
		    RealmOwner => {name => 'btest_read'},
		)->get('realm_id'),
	    }, [{}]] => not_die(),
	],
	builtin_string_ref => [
	    '' => [\''],
	],
    ],
    sub {'Bivio::UNIVERSAL'} => [
	simple_package_name => 'UNIVERSAL',
    ],
    sub {'Bivio::Die'} => [
	die => DIE(),
    ],
];
