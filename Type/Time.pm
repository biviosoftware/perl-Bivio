# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
package Bivio::Type::Time;
use strict;
$Bivio::Type::Time::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Type::Time - describes the type time without a calendar value

=head1 SYNOPSIS

    use Bivio::Type::Time;

=cut

=head1 EXTENDS

L<Bivio::Type::DateTime>

=cut

use Bivio::Type::DateTime;
@Bivio::Type::Time::ISA = qw(Bivio::Type::DateTime);

=head1 DESCRIPTION

C<Bivio::Type::Time> describes a time value which cannot have
does not have a date component.  C<Time> is stored in the
database as an SQL C<DATE> whose calendar component is zero, i.e.
Julian time 0.  In perl, a time is represented as the number
of seconds since the unix epoch.

=cut

=for html <a name="to_sql_param"></a>

=head2 to_sql_param(string param_value) : string

Returns string form of unix time (integer) which is acceptable
to a positional parameter generated by L<to_sql_value|"to_sql_value">.

=cut

sub to_sql_param {
    my(undef, $param_value) = @_;
    return undef unless defined($param_value);
    Carp::croak("$param_value: invalid time (> seconds in a day)")
		if $param_value >= Bivio::Type::DateTime::SECONDS_IN_DAY();
    return Bivio::Type::DateTime->to_sql_param($param_value);
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
