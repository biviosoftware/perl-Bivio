#!perl -w
# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
use strict;

=head1 NAME

b-societas-start - start all the servers for Societas

=head1 SYNOPSIS

b-societas-start [-xterm] [-tmp] [-n] file-root

=head1 DESCRIPTION

B<b-societas-start> starts the necessary servers to serve societas.

The directory <file-root> must contain the files to be served
by L<b-file-server>.

The command will output the root URL being served by
L<b-http-dispatcher> and how to invoke L<b-sendmail-agent>
to pass mail to L<b-mail-dispatcher>.

=head1 OPTIONS

=over 4

=item B<-n>

Don't actually run the servers, but print out the commands that
would be executed and the configuration file which would be
generated.

=item B<-tmp>

Creates a temporary directory F</tmp/societas$$> from which
the programs will be run.  After the execution, the entire
directory will be cleaned up.

=item B<-xterm>

Start the programs in separate xterms.  The xterm "names" will
be the program names, so you can set up your ~/.Xdefaults to
configure the geometry for each window separately.

=back

=cut

#=IMPORTS
use Bivio::IO::Config;
use Bivio::IO::Alert;
use Cwd ();

#=VARIABLES

sub main {
    my(@argv) = @_;
    $> == 0 && die('this program cannot be run as root');
    Bivio::IO::Config->initialize(\@argv);
    my($cmd_fmt) = '"$prog_file $arg"';
    my($tmp);
    my($file_root);
    my($execute) = 1;
    local($_);
    while (@argv) {
	$_ = shift(@argv);
	/^-x(term)?$/
		&& ($cmd_fmt = qq("xterm -name \$prog -e $cmd_fmt"), next);
	/^-t(mp)?$/ && ($tmp = "/tmp/societas$$", next);
	/^-n/ && ($execute = 0, next);
	/^-/ && &_usage("unknown option \"$_\"");
	defined($file_root) && &_usage('too many arguments');
	$file_root = $_;
    }
    defined($file_root) && -d $file_root
	    || &_usage('file server root must be supplied');
    my($pwd) = &Cwd::cwd();
    $file_root =~ s!^([^/])!$pwd/$1!;
    if ($tmp) {
	if ($execute) {
	    mkdir($tmp, 0755) || die("mkdir $tmp: $!");
	    chdir($tmp) || die("chdir $tmp: $!");
	}
	else {
	    print STDOUT "Would mkdir and cd to $tmp\n";
        }
    }
    my(%processes, $server);
    $SIG{TERM} = $SIG{QUIT} = $SIG{HUP} = $SIG{INT} = sub {
	my($sig) = @_;
	print STDERR "Caught SIG$sig--shutting down\n";
	kill('KILL', keys %processes);
	$execute && $tmp && chdir('/') && system("rm -rf $tmp");
	exit(1);
    };
    $tmp || system('rm -f bivio[0-9]*.conf bmd[0-9]*');
    my($conf) = $tmp ? "$tmp/bivio.conf" : "$pwd/bivio$$.conf";
    $ENV{'BIVIO_CONF'} = $conf;
    my($http_port) = 10000 + $> * 10;
    my($file_port) = ($tmp || $pwd) . "/bfs";
    my($mail_port) = ($tmp || $pwd) . "/bmd";
    my($host) = `hostname`;
    chop($host);
    $host = sprintf("%d.%d.%d.%d", unpack('C4', (gethostbyname($host))[4]));
    my($user) = getpwuid($>) || $>;
    print STDERR "http://$host:$http_port/club/setup\n",
	    "b-sendmail-agent $user $mail_port x x < msg\n";
    unless ($execute) {
	print STDOUT "Would export BIVIO_CONF=$conf\n";
	$conf = '&STDOUT';
    }
    open(OUT, ">$conf") || die("open $conf: $!");
    while (<DATA>) {
	# Yup, want an extra "e" to get double interpolation.  Kewl, huh?
	s/<(\$[^>]+)>/$1/eeg;
    }
    continue {
	(print OUT) || die("write $conf: $!");
    }
    close(OUT) || die("close $conf: $!");
    close(DATA);
    foreach $server (qw(Bivio/File/b-file-server:file
                   Bivio/Agent/Mail/b-mail-dispatcher:mail
                   Bivio/Agent/HTTP/b-http-dispatcher:http)) {
	my($prog_file, $prog, $arg) = $server =~ m!(.+/(.+)):(\w+)!;
	if ($execute) {
	    my($pid) = fork;
	    defined($pid) || die("fork: $!");
	    if ($pid) {
		$processes{$pid} = $prog;
		next;
	    }
	}
	# interpolate $prog_file and $arg in $cmd_fmt
	$ENV{PERLLIB} && ($prog_file = $ENV{PERLLIB} . '/' . $prog_file);
	$prog_file = -f $prog_file ? ('perl -w ' . $prog_file) : $prog;
	my($cmd) = eval $cmd_fmt;
	if ($execute) {
	    print STDERR "[$$] Starting: $cmd\n";
	    exec($cmd);
	    die("exec $cmd: $!");
	}
	else {
	    print STDOUT "Would start: $cmd\n";
	}
    }
    $execute || return 0;
    my($pid);
    while (($pid = wait) > 0) {
	print STDERR "$pid: $processes{$pid}: exitted\n";
    }
    print STDERR "All servers exitted\n";
    return 1;
}

sub _usage {
    my($msg) = join('', @_);
    print STDERR <<"EOF";
$0: $msg
usage: $0 [-tmp] [-xterm] [-n] file-root
EOF
    exit(1);
}

&main(@ARGV);

=head1 ENVIRONMENT

=over 4

=item $PERLLIB

Must point to the appropriate development directory if you are
starting the server for testing your own copy.  See
L<"FILES">.

=back

=head1 X CONFIGURATION

The B<-xterm> options will create three windows.  The following
example configures the windows to be on the right hand side,
stacked one on top of the other.  The fonts are small.

    b-file-server*geometry: 80x22-0+0
    b-mail-dispatcher*geometry: 80x22-0+250
    b-http-dispatcher*geometry: 80x22-0+500
    b-file-server*font: *-courier-medium-r-normal--10-*-iso8859-1
    b-mail-dispatcher*font: *-courier-medium-r-normal--10-*-iso8859-1
    b-http-dispatcher*font: *-courier-medium-r-normal--10-*-iso8859-1


=head1 FILES

=over 4

=item $PERLLIB/Bivio/File/b-file-server

File server to be used if it exists and is readable.

=item $PERLLIB/Bivio/Agent/Mail/b-mail-dispatcher

Mail dispatcher to be used if it exists and is readable.

=item $PERLLIB/Bivio/Agent/HTTP/b-http-dispatcher

HTTP dispatcher to be used if it exists and is readable.

=back

=head1 SEE ALSO

Bivio::IO::Config, b-mail-dispatcher, b-file-server, b-http-dispatcher

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

#Local Variables:
#mode:cperl
#End:
__DATA__
use strict;
{
    'Bivio::Agent::Request' => {
	http_host => '<$host>:<$http_port>',
	mail_host => '[<$host>]',
    },
    'Bivio::Biz::Model::MailMessage' => {
	file_server => 'file',
    },
    'Bivio::Biz::Mime::MimeParse' => {
	file_server => 'file',
    },
    'Bivio::Mail::Store::MIMEDecode' => {
	file_server => 'file',
    },
    'Bivio::Die' => {
	stack_trace => 1,
    },
    'Bivio::Ext::DBI' => {
	oracle_home => '<$ENV{ORACLE_HOME}>',
	database => '<$ENV{ORACLE_SID}>',
	user => '<$ENV{DBI_USER}>',
	password => '<$ENV{DBI_PASS}>',
    },
    'Bivio::File::Server' => {
	file => {
	    root => '<$file_root>',
	},
    },
    'Bivio::IO::Alert' => {
# Doesn't work with Bivio::Die in the way
	stack_trace_die => 0,
	stack_trace_warn => 1,
	want_stderr => 1,
	want_pid => 1,
# This doesn't work right now.
	intercept_die => 0,
	intercept_warn => 1,
    },
    'Bivio::IO::Trace' => {
	'package_filter' => '/Bivio/',
    },
    'Bivio::IPC::Client' => {
	file => {
	    proto => 'unix',
	    port => '<$file_port>',
	},
	mail => {
	    proto => 'unix',
	    port => '<$mail_port>',
	},
    },
    'Bivio::IPC::Server' => {
	file => {
	    proto => 'unix',
	    port => '<$file_port>',
	},
	mail => {
	    proto => 'unix',
	    port => '<$mail_port>',
	    file_mode => 0777,
	},
    },
    'Bivio::UI::Icon' => {
	uri => '/i',
	directory => '<$pwd>/html/i',
    },
    'Bivio::UI::HTML::Widget::Page' => {
	show_time => 1,
    },
    main => {
	http => {
	    port => '<$http_port>',
	},
    },
};
