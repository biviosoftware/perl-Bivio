# Copyright (c) 2006 bivio Software, Inc.  All Rights Reserved.  $Id:
# RealmFile.bunit,v 1.5 2006/07/14 23:08:15 nagler Exp $
Request();
req()->set_realm_and_user(qw(fourem demo));
my($dir) = '/search-text/';
[
    {
	object => class(),
	compute_params => sub {
	    my(undef, $params) = @_;
	    rollback();
	    return [model('RealmFile')->create_with_content({
		path => ($params->[1] || $dir) . $params->[0],
	    }, read_file('RealmFile/' . $params->[0]))];
	},
    } => [
	{
	    method => 'parse_content',
	    check_return => sub {
		my(undef, undef, $expect) = @_;
		$expect = [@$expect, 'TITLE']
		    if @$expect == 1;
		return @$expect == 2 ? [@$expect, qr{^some text\s*$}s] : $expect;
	    },
	    compute_return => sub {
		my(undef, $actual) = @_;
		return [$actual->[0] ? map(
		    ref($_) ? $$_ : $_,
		    @{$actual->[0]}{qw(type title text)},
		) : ()];
	    },
	} => [
#TODO: Debug why </dev/null has to be in this line
	    `pdftotext -v 2>&1 < /dev/null` =~ /version/i
		? ('t.pdf' => 'application/pdf') : (),
	    't.txt' => ['text/plain', ''],
	    't.csv' => ['text/csv', '', "some,text\n"],
	    't.html' => 'text/html',
	    't.bwiki' => 'text/plain',
	    't.eml' => ['message/rfc822', 'TITLE', (sub {chomp(my $x = shift); $x})->(<<'EOF')],
subject: TITLE
to: hello
from: John Doe <john@example.com>

 some text 
EOF
	    't.gif' => [],
	    [TextFile => '/Wiki/'] => ['text/plain', 'TextFile'],
	    TextFile => ['text/plain', ''],
	    BinaryFile => [],
	    [BinaryFile => '/Wiki/'] => [],
	],
	{
	    method => 'parse_for_xapian',
	} => [
	    'xapian.html' => sub {
		my(undef, $actual) = @_;
		shift->actual_return([
		    +{map({
			my($k, $v) = $_ =~ /^([A-Z])([^A-Z].*)$/;
			$k ? ($k, $v) : split(/:/, $_, 2);
		    } @{$actual->[0]})},
		    $actual->[1],
		]);
		my($now) = Bivio::Type::DateTime->local_now_as_file_name;
		return [
		    {map(ref($_) ? lc(req()->get_widget_value(@$_)) : $_,
			 XREALMID => ['auth_id'],
			 XUSERID => ['auth_user_id'],
			 XUSERFULLNAME => [qw(auth_user display_name)],
			 XISPUBLIC => 0,
			 XISREADONLY => 0,
			 G => [qw(auth_realm owner name)],
			 XREALMFULLNAME => [qw(auth_realm owner display_name)],
			 XREALM => [qw(auth_realm owner name)],
			 XUSER => [qw(auth_user name)],
			 XEMAIL => 'demo@bivio.biz',
			 A => lc(req()->get_nested(qw(auth_user display_name)))
			     . ' demo@bivio.biz',
			 XREALM => 'fourem',
			 S => 'a short title',
			 T => 'text/html',
			 D => substr($now, 0, 8),
			 M => substr($now, 0, 6),
			 Y => substr($now, 0, 4),
			 P => '/search-text/xapian.html',
		    )},
		    [qw(
                        a
			short
			title
			asterisks
			f.u.d.
			is
			what
			makes
			programmers
			worry
			so
			much
			i
			have
			no
			worries
		    )],
		];
	    },
	],
    ],
];
