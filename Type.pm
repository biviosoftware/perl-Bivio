# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
package Bivio::Type;
use strict;
$Bivio::Type::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Type - base class for all types

=head1 SYNOPSIS

    use Bivio::Type;

=cut

use Bivio::UNIVERSAL;
@Bivio::Type::ISA = qw(Bivio::UNIVERSAL);

=head1 DESCRIPTION

C<Bivio::Type>

=cut

=head1 CONSTANTS

=cut

=for html <a name="CAN_BE_NEGATIVE"></a>

=head2 CAN_BE_NEGATIVE : boolean

Can the number be negative?

=cut

sub CAN_BE_NEGATIVE {
    return undef;
}

=for html <a name="CAN_BE_POSITIVE"></a>

=head2 CAN_BE_POSITIVE : boolean

Can the number be positive?

=cut

sub CAN_BE_POSITIVE {
    return undef;
}

=for html <a name="CAN_BE_ZERO"></a>

=head2 CAN_BE_ZERO : boolean

Can the number be equal to 0?

=cut

sub CAN_BE_ZERO {
    return undef;
}

=for html <a name="DECIMALS"></a>

=head2 DECIMALS : int

Number of digits to the right of the decimal point.

=cut

sub DECIMALS {
    return undef;
}

=for html <a name="MAX"></a>

=head2 MAX : any

Maximum value for this type in perl form.  Note that numbers
are returned as strings if they are larger than can be handled
by perl's integer type.

=cut

sub MAX {
    return undef;
}

=for html <a name="MIN"></a>

=head2 MIN : any

Minimal value for this type in perl form.  Note that numbers
are returned as strings if they are larger than can be handled
by perl's integer type.


=cut

sub MIN {
    return undef;
}

=for html <a name="PRECISION"></a>

=head2 abstract PRECISION : int

Maximum number of digits in a value of this type.

=cut

sub PRECISION {
    return undef;
}

=for html <a name="WIDTH"></a>

=head2 WIDTH : int

Maximum number of characters for string representations of
this value.  If a number cannot be negative, then will
not include a character for a sign.

=cut

sub WIDTH {
    die('abstract method');
}

#=IMPORTS

#=VARIABLES

=head1 METHODS

=cut

=for html <a name="from_sql_column"></a>

=head2 from_sql_column(string result) : string

Converts I<result>, which is a single column value returned by SELECT, to the
perl representation of that type.  I<result> must be generated by
L<from_sql_value|"from_sql_value"> for the type.  For enums, will convert to
the appropriate enum value.  For dates, will convert to a unix time (integer).

=cut

sub from_sql_column {
    shift;
    return shift;
}

=for html <a name="from_sql_value"></a>

=head2 from_sql_value(string place_holder) : string

Converts I<place_holder>, which is typically a column name on a SELECT, to
a TO_CHAR string.  For most types, returns I<place_holder>.  For dates,
returns the appropiate TO_CHAR for that date type.

I<place_holder> will not be quoted.

See L<from_sql_column|"from_sql_column">.

=cut

sub from_sql_value {
    shift;
    return shift;
}

=for html <a name="to_sql_param"></a>

=head2 to_sql_param(string param_value) : string

Converts I<param_value>, which is in the perl representation the data type, to
a value to a value execute can use.  For most types, simply returns
I<param_value>.  For dates, converts the unix time (integer) to the string form
acceptable to the type's L<to_sql_value|"to_sql_value">.  For enums, converts
the enum to an integer.  For booleans, forces to be 0 or 1.

=cut

sub to_sql_param {
    shift;
    return shift;
}

=for html <a name="to_sql_value"></a>

=head2 to_sql_value(string place_holder) : string

Converts I<place_holder> to an appropriately formed SQL value for the type.
Typically, I<place_holder> is a question-mark (?) and the text generated
is also a question-mark.  However, for dates, the appropriate
C<TO_DATE> call is generated for I<value>.

I<place_holder> will not be quoted.

See also L<to_sql_param|"to_sql_param">.

=cut

sub to_sql_value {
    shift;
    return shift;
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
