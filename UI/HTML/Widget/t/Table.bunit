# Copyright (c) 2007-2009 bivio Software, Inc.  All Rights Reserved.
# $Id$
Widget({
    setup_render => sub {
        req()->put(task_id => Bivio::Agent::TaskId->PRODUCTS);
        model('ProductList', {parent_id => 'REPTILES'})
            unless req()->unsafe_get('Model.ProductList');
        return;
    },
    new_params => sub {
        my($case, $params) = @_;
        if (@$params == 1) {
            $case->put(_expect_args => $params->[0]);
            return [ProductList => ['Product.product_id', 'Product.name'],
                    @$params];
        }
        else {
            return [ProductList => @$params];
        }
    },
});
config({
    'Bivio::Type::CacheTagFilePath' => {
        use_cached_path => 1,
    },
});
[
    map(([$_] => undef),
        {},
        {cellpadding => 2},
        {cellspacing => 3},
        {width => '100%'},
        {border => 1},
    ),
    map({
            my($left, $right) = @$_;
            ([$left] => _t($right));
    }
            [{align => 'n'}, {class => 'b_align_n'}],
            [{expand => 1}, {width => '95%', class => 'b_align_left'}],
            [{title => 'Reptiles'}, {title => qq{\n<tr class="b_title_row"><td colspan="2"><div>Reptiles</div></td>\n</tr>}, class => 'b_align_left'}],
    ),
    [{class => 'reptiles'}] => _chomp(<<'EOF'),

<table class="reptiles">
<tr class="b_heading_row">
<th><a rel="nofollow" href="/pub/products?p=REPTILES&amp;o=1a">Product ID</a></th>
<th><a rel="nofollow" href="/pub/products?p=REPTILES&amp;o=0d">Product Name<span class="b_sort_arrow ascend"> &#9650;</span></a></th>
</tr>
<tr class="b_data_row b_odd_row">
<td>RP-LI-02</td>
<td>Iguana</td>
</tr>
<tr class="b_data_row b_even_row">
<td>RP-SN-01</td>
<td>Rattlesnake</td>
</tr>
</table>
EOF
    [{class => 'reptiles', before_row =>
          class('HTMLWidget.String')->new('FOO', 0)}] => _chomp(<<'EOF'),

<table class="reptiles">
<tr class="b_heading_row">
<th><a rel="nofollow" href="/pub/products?p=REPTILES&amp;o=1a">Product ID</a></th>
<th><a rel="nofollow" href="/pub/products?p=REPTILES&amp;o=0d">Product Name<span class="b_sort_arrow ascend"> &#9650;</span></a></th>
</tr>
<tr><td colspan="2">FOO</td></tr>
<tr class="b_data_row b_odd_row">
<td>RP-LI-02</td>
<td>Iguana</td>
</tr>
<tr><td colspan="2">FOO</td></tr>
<tr class="b_data_row b_even_row">
<td>RP-SN-01</td>
<td>Rattlesnake</td>
</tr>
</table>
EOF
    [[
        {
            column_widget => class('HTMLWidget.Join')->new(['&nbsp;']),
            column_data_class => 'ping',
        },
        {field => 'Product.name', column_data_class => 'zing'}
    ], {class => 'reptiles', show_headings => 0}] => _chomp(<<'EOF'),

<table class="reptiles">
<tr class="b_data_row b_odd_row">
<td class="ping">&nbsp;</td>
<td class="zing">Iguana</td>
</tr>
<tr class="b_data_row b_even_row">
<td class="ping">&nbsp;</td>
<td class="zing">Rattlesnake</td>
</tr>
</table>
EOF
];

sub _chomp {
    my($x) = @_;
    chomp($x);
    return $x;
}

sub _t {
    my($exp) = @_;
    my($ctre) = Type_CacheTag()->REGEX;
    my($x) = _chomp(<<"EOF");

<table border="0" cellpadding="5" cellspacing="0" valign="NOP" width="NOP" class="NOP"> title=NOP
<tr class="b_heading_row">
<th class="b_align_s"><a rel="nofollow" href="/pub/products\\?p=REPTILES&amp;o=1a">Product ID</a></th>
<th class="b_align_s"><a rel="nofollow" href="/pub/products\\?p=REPTILES&amp;o=0d">Product Name <img alt="This column sorted in ascending order" class="b_align_bottom" border="0" src="/i/sort_down\.$ctre\.gif" width="10" height="8" /></a></th>
</tr>
<tr class="b_heading_separator_row"><td colspan="2"><table width="100%" cellspacing="0" cellpadding="0" border="0">
<tr bgcolor="#000000"><td class="line_cell"><img class="b_clear_dot" alt="dot" height="1" src="/i/dot\.gif" width="1" /></td></tr></table></td>
</tr>
<tr bgcolor="#D5EEFF" class="b_data_row b_odd_row">
<td class="b_align_left">RP-LI-02</td>
<td class="b_align_left">Iguana</td>
</tr>
<tr bgcolor="#F0F9FF" class="b_data_row b_even_row">
<td class="b_align_left">RP-SN-01</td>
<td class="b_align_left">Rattlesnake</td>
</tr>
</table>
EOF
    $exp ||= {};
    while (my($k, $v) = each(%$exp)) {
        $x =~ s/(?<=\b$k=)("?)[^"\s>]+("?)/$1$v$2/;
    }
    $x =~ s/ \w+="?NOP"?//g;
    $x =~ s/ title=//g;
    return qr{$x};
}
