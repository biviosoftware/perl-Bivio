# Copyright (c) 2005-2010 bivio Software, Inc.  All Rights Reserved.
# $Id$
test_setup('PetShop', 'groupware');
home_page();
login_as('root');
follow_link(qw(fourem-sub1-1 ^calendar$ add_event));
my($r) = random_string();
submit_form({
    title => $r,
    start_time => '11:00',
    end_time => '12:00',
});
follow_link($r, 'modify');
verify_form({
    title => $r,
    start_time => '11:00',
    end_time => '12:00',
});
my($r2) = random_string();
submit_form({
    title => $r2,
    start_time => '10:00',
});
follow_link('back_to_list');
verify_no_text($r);
follow_link($r2);
follow_link('delete');
submit_form('delete');
verify_no_text($r2);
# Show in UTC and View event list...
submit_form({
        view_events_in_a_list => 1,
    });
verify_text('No events for this forum');
submit_form({
        view_events_in_a_list => 0,
    });
verify_no_text('No events for this forum');
follow_link(qw(add_event));
submit_form({
            title => 'mst_event',
            time_zone => 'MST',
            start_time => '11:00',
            end_time => '12:00',
    });
verify_text(qr(11:00.*mst_event)si);
submit_form({
        show_in_utc_time => 1,
        view_events_in_a_list => 1,
    });
verify_text(qr(18:00.*mst_event)si);
follow_link('mst_event', 'delete');
submit_form('delete');
verify_no_text('mst_event');
# add repeated events and check number of occurances...
my($start_date) = Type_Date()->set_beginning_of_month(Type_Date()->now);
my($repeat_end) = Type_Date()->add_days($start_date, 31);
# repeats interval values are the recurrence counts
# within the start_date to repeat_ends period
my($repeats) = {
    every_week => 5,
    every_two_weeks => 3,
    every_four_weeks => 2,
};
foreach my $interval (keys %{$repeats}) {
    follow_link(qw(add_event));
    my($title) = random_string();
    submit_form({
	title => $title,
	start_date => Type_Date()->to_string($start_date),
	start_time => '12pm',
	end_date => Type_Date()->to_string($start_date),
	end_time => '1 pm',
	repeats => $interval,
	repeat_ends => Type_Date()->to_string($repeat_end),
    });
    my($count) = $repeats->{$interval};
    my($links_regexp);
    foreach (1..$count) {
	$links_regexp .= "$title.*";
    }
    verify_text(qr($links_regexp)s);
    foreach my $i (1..$count) {
	my($link) = $i == $count ? $title : "${title}_".($count-$i);
	follow_link($link, 'delete');
	submit_form('delete');
    }
    verify_no_text($title);
};
# add daily events and traverse using back/next links..
my($d1) = Type_Date()->add_days(Type_Date()->now, -2);
my($d2) = Type_Date()->now;
my($d3) = Type_Date()->add_days($d2, 2);
my($daysevents) = {
    $d1 => [['1','2']],
    $d2 => [['8:30', '9:00'], ['12pm','2pm'], ['16:00','17:00']],
    $d3 => [['8am', '9am']],
};
my($titles) = [];
foreach my $devk (sort keys %{$daysevents}) {
    foreach my $d (@{$daysevents->{$devk}}) {
	my($title) = random_string();
        push(@$titles, $title);
	my($st, $et) = @$d;
        follow_link(qw(add_event));
	submit_form({
	   title => $title,
	   start_date => $devk,
	   start_time => $st,
	   end_date => $devk,
	   end_time => $et,
	});
    };
};
# note that back is actually going to newer event
for(my $i = 0; $i < @$titles; $i++) {
    $i == 0 ? follow_link($titles->[$i]) : follow_link(qr{^back$}i);
    verify_text($titles->[$i]);
};
for(my $i = @$titles - 2; $i >= 0; $i--) {
    follow_link('next');
    verify_text($titles->[$i]);
};
follow_link('back_to_list');
for(my $i = 0; $i < @$titles; $i++) {
    follow_link($titles->[$i], 'delete');
    submit_form('delete');
};

