# $Id$
#
# Order detail
#
view_parent('menu');
view_put(header_title => 'Order Shipped');

# Returns a address widget which renders the specified Address.
my($address_widget) = sub {
    my($field) = @_;

    return Join([
	String([$field, 'street1']),
	'<br>',
	If([$field, 'street2'],
		Join([String([$field, 'street2']), '<br>',]),
		Join([''])),
	String([$field, 'city']),
	', ',
	String([$field, 'state']),
	vs_blank_cell(2),
	String([$field, 'zip']),
    ])->put(string_font => 'page_text');
};

# renders the last four digits of the credit card
my($card_number) = sub {
    my($source, $number) = @_;
    return '***********' . substr($number, -4, 4);
};

view_put(menu_content => Grid([
    [
	Join([
	    String('Date: ', 'page_heading'),
	    String(['Model.ECPayment', 'creation_date_time',
                'HTMLFormat.Date']),
	]),
    ], [
	Join([
	    String('Email: ', 'page_heading'),
	    String(['Model.Email', 'email']),
	    '<br>',
	]),
    ], [
	String('Order Information:', 'page_heading'),
    ], [
	Join([
	    String('Order ID: ', 'form_field_label'),
	    String(['Model.Order', 'realm_id']),
	    '<br>',
	]),
    ], [
	Table('CartItemList', [
	    'Item.item_id',
	    ['item_name', {
		wf_list_link => {
		    query => 'THIS_CHILD_LIST',
		    task => 'ITEM_DETAIL',
		},
	    }],
	    'CartItem.unit_price',
	    'CartItem.quantity',
	    'total_cost',
	], {
	    cellpadding => 2,
	    cellspacing => 2,
	    footer_row_widgets => [
		String('Total:', 'table_heading'),
		vs_blank_cell()->put(column_span => 3),
		TableSummaryCell({
		    field => 'total_cost',
		    string_font => 'table_heading',
		}),
	    ],
	}),
    ], [
	String('Shipping Information:', 'page_heading'),
    ], [
	Join([
	    String('Shipping Address:'),
	    '<br>',
	    String(['Model.Order', 'ship_to_name']),
	    '<br>',
	    # Attribute is put on the request by view_pre_execute
	    &$address_widget('order-commit.ship_to_address'),
	]),
    ], [
	String('Billing Information:', 'page_heading'),
    ], [
	Join([
	    String('Bill To Address:'),
	    '<br>',
	    String(['Model.Order', 'bill_to_name']),
	    '<br>',
	    # Attribute is put on the request by view_pre_execute
	    &$address_widget('order-commit.bill_to_address'),
	    '<p>',
	]),
    ], [
	String('Credit Card Information:', 'page_heading'),
    ], [
  	Grid([
  	    [
  		String('Number: '),
  		String([$card_number,
                    ['Model.ECCreditCardPayment', 'card_number']]),
  	    ], [
  		String('Expiration Date: '),
  		CreditCardExpiration({
  		    value => ['Model.ECCreditCardPayment',
                        'card_expiration_date'],
  		}),
  	    ],
  	], {
  	    pad => 2,
  	}),
   ], [
       Join([
           String('Status: ', 'page_heading'),
           String([['Model.ECPayment', 'status'], '->get_short_desc']),
       ]),
    ],
], {
    space => 12,
    string_font => 'page_text',
}));

view_pre_execute(sub {
    my($req) = @_;
    Bivio::Biz::Model->new($req, 'Email')->unauth_load_or_die({
        realm_id => $req->get('auth_user_id'),
        location => Bivio::Type::Location->PRIMARY,
    });
    my($order) = $req->get('Model.Order');
    $order->get_model('ECPayment')->get_model('ECCreditCardPayment');

    foreach my $a (qw(BILL_TO SHIP_TO)) {
	# Construct a unique address (based on this View's name), since
	# the Request.* address space by all classes.
	$req->put('order-commit.'.lc($a).'_address' => Bivio::Biz::Model->new(
	    $req, 'Address')->unauth_load_or_die({
		realm_id => $order->get('realm_id'),
		location => Bivio::Type::Location->from_name($a),
	    }));
    }
});
