# Copyright (c) 2006 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request();
req()->set_realm('demo');
my($id) = req('auth_id');
[
    sub {model('RealmOwner')} => [
        map_iterate => [
	    [] => expect_contains([{name => 'demo'}]),
	    ['name'] => [['demo']],
	    [sub {shift->get('realm_id')}] => [[$id]],
	    [sub {shift->get('realm_id')}, 'realm_type'] => [[$id]],
	],
	unsafe_load_first => [
	    [{name => 'not-found-name'}] => [undef],
	    [{name => 'guest'}] => [undef],
	    [{name => 'demo'}] => sub {
		my(undef, $actual) = @_;
		assert_equals(realm_id('demo'), $actual->[0]->get('realm_id'));
		return 1;
	    },
	],
	put_on_request => [
	    [1] => undef,
	],
	sub {
	    req()->clear_nondurable_state;
	    req('Model.RealmOwner');
	    return;
	} => undef,
    ],
];
