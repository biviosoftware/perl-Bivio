# Copyright (c) 2006 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request('initialize_fully');
req()->put_durable(ignore_client_redirect => 1);
set_realm_and_user(qw(fourem root));
my($dir) = '/EasyForm/bunit';
my($csv) = "$dir.csv";
my($log) = '/EasyForm/Error.log';
my($rf) = Bivio::Biz::Model->new(req(), 'RealmFile');
$rf->delete({path => $csv});
$rf->delete({path => $log});
$rf->delete_deep({path => $dir});
$rf->create_folder({path => $dir});
$rf->create_with_content({
    path => $csv,
}, \(<<'EOF'));
&date,&client_addr,&email,a,b,C
EOF
commit();
ignore_redirects(1);
[
    class() => [
	{
	    method => 'execute',
	    compute_params => sub {
		my(undef, $params) = @_;
		req()->put_durable(
		    form => $params->[0],
		    path_info => $params->[1] || 'bunit',
		    task_id => Bivio::Agent::TaskId->from_name(
			$params->[2] || 'FORUM_EASY_FORM'),
		    query => {goto => 'http://www.bivio.biz'},
		    is_deviance => @$params > 1,
		);
		req()->get('r')->method($params->[3] || 'POST');
		return [req()];
	    },
	    compute_return => sub {
		commit();
		return [$rf->load({
		    path => req()->get('is_deviance') ? $log : $csv
		})->get_content];
	    },
	} => [
	    [
		{a => '1'},
	    ] => qr{\n[\d/]+ [\d:]+ GMT,127.0.0.1,root\@bivio.biz,1,,\n},
	    [
		{a => 1, B => 2, c => 3},
	    ] => qr{\n[\d/]+ [\d:]+ GMT,127.0.0.1,root\@bivio.biz,1,2,3\n},
	    [{a => 1, not_found => 3}, undef] =>
		qr{EasyForm/bunit.csv: failed with error: \[not_found\]\: unexpected fields submitted\n\&client_addr,\&date,\&email,a,not_found\n127.0.0.1,.*,root\@bivio.biz,1,3\n}s,
	    [{a => 1}, 'nosuchfile'] => qr{CSV file not found},
	    [{a => 1}, undef, 'ROBOTS_TXT'] => qr{directory not found},
	    [{}] => qr{\n[\d/]+ [\d:]+ GMT,127.0.0.1,root\@bivio.biz,,,\n},
 	    [undef, undef] =>
 		qr{EasyForm/bunit.csv: failed with error: undefined form submitted\n<no form data>\n}s,
	    [{a => 'a', b => 'b', c => {filename => ''}}] =>
		qr{\n[\d/]+ [\d:]+ GMT,127.0.0.1,root\@bivio.biz,a,b,\n},
	    [{a => 1, c => {
		filename => 'x.txt',
		'content/type' => 'content-type/ignored',
		content => \("some text\n"),
	    }}] => sub {
	        my($case, $actual) = @_;
		my($file) = reverse(
		    split(/,/, (reverse(split(/\n/, ${$actual->[0]})))[0]));
		Bivio::Die->die($file, ': file name wrong')
		    unless $file =~ m{^/EasyForm/bunit/\d+-c-x.txt$};
		Bivio::Die->die($rf->get_content, ': wrong content for ', $file)
		    unless "some text\n"
		    eq ${$rf->load({path => $file})->get_content};
		return 1;
	    },
	    [{a => 1}, undef, undef, 'GET'] => CORRUPT_FORM(),
	    [
		{a => '1'},
	    ] =>  sub {
		Bivio::Die->die(req(), ': missing required attributes')
		    unless req()->get('easy_form');
		foreach my $a (qw(mail_to file_path labels values)) {
		    Bivio::Die->die($a, ': missing required attribute')
			    unless req()->get_nested('easy_form', $a);
		}
		return 1;
	    },
	    [{a => 1, not_found => 3}, undef] => =>  sub {
		Bivio::Die->die(req(), ': missing required attributes')
		    unless req()->get('easy_form');
		foreach my $a (qw(mail_to file_path error error_msg labels values)) {
		    Bivio::Die->die($a, ': missing required attribute')
			    unless req()->get_nested('easy_form', $a);
		}
		return 1;
	    },
	],
    ],
];
