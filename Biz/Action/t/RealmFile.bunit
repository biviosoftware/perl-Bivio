# Copyright (c) 2007 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request();
req()->set_realm_and_user('RealmFile2', undef);
model('RealmFile')
    ->create_or_update_with_content({path => '/ARF/0'}, \('not to be found'));
req()->set_realm_and_user('fourem');
# Because of the eml files, will see "Unable to parse address:"
# NOTE: duplicate /Public/A.eml deletes the previous one so /Archived/A;1.eml
# test works
foreach my $path (qw(
    /ARF/0
    /Public/ARF.txt
    /Public/ARF_Public.txt
    /ARF_Private.txt
    /ARF.txt
    /Public/A.eml
    /Public/A.eml
)) {
    model('RealmFile')->create_or_update_with_content({path => $path}, \$path);
}
commit();
req()->set_user(undef);
options({
    compute_params => sub {
        my($case, $params) = @_;
        if (ref($params->[0]) eq 'HASH') {
            req()->put(%{shift(@$params)});
        }
        else {
            req()->put(path_info => shift(@$params));
            if ($case->get('method') =~
                    /^(access_controlled_execute|execute_show_original)$/) {
                return [req()];
            }
        }
        return [req(), undef, req('auth_id'), @$params];
    },
    compute_return => sub {
        return [req('reply')->get_output];
    },
});
[
    class() => [
        execute_private => [
            '/ARF/0' => '/ARF/0',
            '/ARF' => MODEL_NOT_FOUND(),
        ],
        access_controlled_execute => [
            '/ARF/0' => FORBIDDEN(),
            '/ARF.txt' => '/Public/ARF.txt',
            'A.eml' => '/Public/A.eml',
            '/Archived/A;1.eml' => FORBIDDEN(),
        ],
        {
            method => 'execute_show_original',
            compute_return => sub {
                return [req('reply')->get_output_type,
                        req('reply')->get_output,
                        req('Model.RealmFile')->get_content_type];
            },
        } => [
            '/A.eml' => ['text/plain', '/Public/A.eml', 'message/rfc822'],
        ],
        unauth_execute => [
            ['/ARF/0'] => '/ARF/0',
            ['/Some/path', '/ARF/0'] => '/ARF/0',
            ['/ARF/0', '/not_found'] => MODEL_NOT_FOUND(),
            # These tests must be last
            [{
                path_info =>'/ARF/0',
                r => class('Bivio::Biz::Action::t::Mock::Reply')->new({Range => 'bytes=2-4'}),
            }] => 'RF/',
            [{
                path_info =>'/ARF/0',
                r => class('Bivio::Biz::Action::t::Mock::Reply')->new({Range => 'bytes=2-'}),
            }] => 'RF/0',
        ],
    ],
];
