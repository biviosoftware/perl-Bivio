# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::Model::Club;
use strict;
$Bivio::Biz::Model::Club::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Biz::Model::Club - interface to club_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::Model::Club;
    Bivio::Biz::Model::Club->new($req);

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::Model::Club::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::Model::Club> is the create, read, update,
and delete interface to the C<club_t> table.

=cut

#=IMPORTS
use Bivio::Biz::Model::MailMessage;
use Bivio::Biz::Model::RealmOwner;
use Bivio::IO::Trace;
use Bivio::SQL::Constraint;
use Bivio::Type::Integer;
use Bivio::Type::Line;
use Bivio::Type::Location;
use Bivio::Type::MailMode;
use Bivio::Type::PrimaryId;

#=VARIABLES
use vars qw($_TRACE);
Bivio::IO::Trace->register;

=head1 METHODS

=cut

=for html <a name="cascade_delete"></a>

=head2 cascade_delete()

Deletes the club, and all of its related transactions, membership records,
files, and file server messages.

=cut

sub cascade_delete {
    my($self) = @_;
    my($id) = $self->get('club_id');
    my($realm) = Bivio::Biz::Model::RealmOwner->new($self->get_request);
    $realm->unauth_load(realm_id => $id)
	    || die("couldn't load realm from club");

    $self->delete_instruments_and_transactions();

    foreach my $table (qw(
            realm_account_t
            realm_user_t)) {

	Bivio::SQL::Connection->execute('
                DELETE FROM '.$table.'
                WHERE realm_id=?',
		[$id]);
    }
    Bivio::SQL::Connection->execute('
            DELETE FROM mail_message_t
            WHERE club_id=?',
	    [$id]);

    # delete file server/mail messages
    Bivio::Biz::Model::File->cascade_delete($realm);

    # Always delete file server files last, since other
    # calls may fail.  Eventually this will go away.
    Bivio::Biz::Model::MailMessage->delete_club($realm);
    $self->delete();
    $realm->cascade_delete;
    return;
}

=for html <a name="check_kbytes"></a>

=head2 check_kbytes(int kbytestin) : boolean

Checks kbytestin to see if we'll go over the limit for this
club's message allocation size.

=cut

sub check_kbytes {
    _trace('check_kbytes called. Validating the size of the message.') if $_TRACE;
    my($self, $kbytestin) = @_;
    _trace('size to check is: ', $kbytestin) if $_TRACE;
    my($curkbytes) = $self->get('kbytes_in_use');
    my($maxkbytes) = $self->get('max_storage_kbytes');
    _trace('max KBytes for club: ', $maxkbytes,
	    'K current bytes in use: ', $curkbytes,
	    'K mail message size: ', $$kbytestin, "K") if $_TRACE;
    if( $curkbytes + $$kbytestin > $maxkbytes){
	_trace('Size for this message exceeds limit for club.') if $_TRACE;
	$$kbytestin = 0;
	return 0;
    }
    $$kbytestin += $curkbytes;
    _trace('The size of this message is ok for this club.') if $_TRACE;
    return 1;
}

=for html <a name="delete_instruments_and_transactions"></a>

=head2 delete_instruments_and_transactions()

Deletes all realm instruments and accounting transaction for the club.
This "cleans the slate" for the club books.

=cut

sub delete_instruments_and_transactions {
    my($self) = @_;

    my($id) = $self->get('club_id');
    foreach my $table (qw(
            realm_instrument_valuation_t
            member_entry_t
            realm_instrument_entry_t
            realm_account_entry_t
            entry_t
            realm_transaction_t
            realm_instrument_t)) {

	Bivio::SQL::Connection->execute('
                DELETE FROM '.$table.'
                WHERE realm_id=?',
		[$id]);
    }
    return;
}

=for html <a name="get_outgoing_emails"></a>

=head2 get_outgoing_emails() : array

Returns an array of email addresses (string) for all members of the club.
If an error occurs during processing, then undef is returned.

=cut

sub get_outgoing_emails {
    my($self) = @_;
#TODO: Need to fix this so looks at all roles and checks MAIL_RECEIVE
#TODO: Need Location policy.  Probably need a field added to table.
#      which says where people want email sent from bivio.
    my($sql) = 'select email_t.email '
	    .' from email_t, realm_user_t '
	    .' where realm_user_t.realm_id=?'
	    .' and realm_user_t.role >='
	    .Bivio::Auth::Role::MEMBER->as_int
	    .' and realm_user_t.user_id=email_t.realm_id';
    my($statement) = Bivio::SQL::Connection->execute($sql,
	    [$self->get('club_id')], $self);

    my($result) = [];
    my($row);
    while($row = $statement->fetchrow_arrayref()) {
	push(@$result, $row->[0])
		if Bivio::Type::Email->is_valid($row->[0]);
    }
#TODO: Do we need statement->finish here?
#    $statement->finish();
    return @$result ? $result : undef;
}


=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : hash_ref

B<FOR INTERNAL USE ONLY>

=cut

sub internal_initialize {
    return {
	version => 1,
	table_name => 'club_t',
	columns => {
            club_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::PRIMARY_KEY()],
            kbytes_in_use => ['Bivio::Type::Integer',
    		Bivio::SQL::Constraint::NOT_NULL()],
            max_storage_kbytes => ['Bivio::Type::Integer',
    		Bivio::SQL::Constraint::NOT_NULL()],
        },
	auth_id => 'club_id',
    };
}

=for html <a name="rename"></a>

=head2 rename(string new_name)

Renames the club and file server directories to the new name.

=cut

sub rename {
    my($self, $new_name) = @_;

    my($realm) = Bivio::Biz::Model::RealmOwner->new($self->get_request);
    $realm->unauth_load(realm_id => $self->get('club_id'))
	    || die("couldn't load realm from club");

#TODO: Catch file server error on rename, so doesn't look bad to user
#      when we lose the race.
    # order is important here, because if the name is already taken
    # we will get a uniqeness constraint violation and a Form can
    # generate the proper error message.  Once we've changed the
    # database, we can be pretty sure the file name will change successfully.
    my($old_name) = $realm->get('name');
    $realm->update({name => $new_name});
    Bivio::Biz::Model::MailMessage->rename_club($old_name, $new_name);
    return;
}

=for html <a name="update"></a>

=head2 update(hash_ref new_values)

Checks to see C<kbytes_in_use> is less than C<max_storage_kbytes>.
If it isn't, throws a C<NO_RESOURCES> exception.

=cut

sub update {
    my($self, $new_values) = @_;
    my($properties) = $self->internal_get;
    my($kb) = defined($new_values->{kbytes_in_use})
	    ? $new_values->{kbytes_in_use} : $properties->{kbytes_in_use};
    my($max) = defined($new_values->{max_storage_kbytes})
	    ? $new_values->{max_storage_kbytes}
		    : $properties->{max_storage_kbytes};
    $self->die('NO_RESOURCES', max_storage_kbytes => $max,
	    kbytes_in_use => $kb) if $max < $kb;
    $self->SUPER::update($new_values);
    return;
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
