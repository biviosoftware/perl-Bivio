# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::Model::Club;
use strict;
$Bivio::Biz::Model::Club::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Biz::Model::Club - interface to club_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::Model::Club;
    Bivio::Biz::Model::Club->new($req);

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::Model::Club::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::Model::Club> is the create, read, update,
and delete interface to the C<club_t> table.

=cut

#=IMPORTS
use Bivio::IO::Trace;
use Bivio::SQL::Constraint;
use Bivio::Type::Integer;
use Bivio::Type::Line;
use Bivio::Type::Location;
use Bivio::Type::MailMode;
use Bivio::Type::PrimaryId;

#=VARIABLES
use vars qw($_TRACE);
Bivio::IO::Trace->register;

=head1 METHODS

=cut

=for html <a name="check_kbytes"></a>

=head2 check_kbytes(int kbytestin) : boolean

Checks kbytestin to see if we'll go over the limit for this
club's message allocation size.

=cut

sub check_kbytes {
    _trace('check_kbytes called. Validating the size of the message.') if $_TRACE;
    my($self, $kbytestin) = @_;
    _trace('size to check is: ', $kbytestin) if $_TRACE;
    my($curkbytes) = $self->get('kbytes_in_use');
    my($maxkbytes) = $self->get('max_storage_kbytes');
    _trace('max KBytes for club: ', $maxkbytes,
	    'K current bytes in use: ', $curkbytes,
	    'K mail message size: ', $$kbytestin, "K") if $_TRACE;
    if( $curkbytes + $$kbytestin > $maxkbytes){
	_trace('Size for this message exceeds limit for club.') if $_TRACE;
	$$kbytestin = 0;
	return 0;
    }
    $$kbytestin += $curkbytes;
    _trace('The size of this message is ok for this club.') if $_TRACE;
    return 1;
}

=for html <a name="get_outgoing_emails"></a>

=head2 get_outgoing_emails() : array

Returns an array of email addresses (string) for all members of the club.
If an error occurs during processing, then undef is returned.

=cut

sub get_outgoing_emails {
    my($self) = @_;
#TODO: Need to fix this so looks at all roles and checks MAIL_RECEIVE
#TODO: Need Location policy.  Probably need a field added to table.
#      which says where people want email sent from bivio.
    my($sql) = 'select email_t.email '
	    .' from email_t, realm_user_t '
	    .' where realm_user_t.realm_id=?'
	    .' and realm_user_t.role >='
	    .Bivio::Auth::Role::MEMBER->as_int
	    .' and realm_user_t.user_id=email_t.realm_id';
    my($statement) = Bivio::SQL::Connection->execute($sql,
	    [$self->get('club_id')], $self);

    my($result) = [];
    my($row);
    while($row = $statement->fetchrow_arrayref()) {
	push(@$result, $row->[0]);
    }
#TODO: Do we need statement->finish here?
#    $statement->finish();
    return $result;
}


=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : hash_ref

B<FOR INTERNAL USE ONLY>

=cut

sub internal_initialize {
    return {
	version => 1,
	table_name => 'club_t',
	columns => {
            club_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::PRIMARY_KEY()],
            kbytes_in_use => ['Bivio::Type::Integer',
    		Bivio::SQL::Constraint::NOT_NULL()],
            max_storage_kbytes => ['Bivio::Type::Integer',
    		Bivio::SQL::Constraint::NOT_NULL()],
        },
	auth_id => 'club_id',
    };
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
