# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::Model::RealmAccount;
use strict;
$Bivio::Biz::Model::RealmAccount::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);
$_ = $Bivio::Biz::Model::RealmAccount::VERSION;

=head1 NAME

Bivio::Biz::Model::RealmAccount - interface to realm_account_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::Model::RealmAccount;
    Bivio::Biz::Model::RealmAccount->new($req);

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::Model::RealmAccount::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::Model::RealmAccount> is the create, read, update,
and delete interface to the C<realm_account_t> table.

=cut

#=IMPORTS
use Bivio::Biz::Model::Preferences;
use Bivio::Die;
use Bivio::SQL::Connection;
use Bivio::Type::ClubPreference;
use Bivio::Type::DateTime;
use Bivio::Type::Institution;

#=VARIABLES

=head1 METHODS

=cut

=for html <a name="create"></a>

=head2 create(hash_ref values)

Fills in the I<institution> if not set.

=cut

sub create {
    my($self, $values) = (shift, shift);
    $values->{institution} = Bivio::Type::Institution->UNKNOWN()
	    unless $values->{institution};
    return $self->SUPER::create($values, @_);
}

=for html <a name="create_initial"></a>

=head2 create_initial()

=head2 create_initial(string realm_id)

Create the initial account, "Broker"

=cut

sub create_initial {
    my($self, $realm_id) = @_;

    $self->create({
	realm_id => $realm_id ||= $self->get_request->get('auth_id'),
	name => 'Broker',
	tax_free => 0,
	in_valuation => 1,
    });
    return;
}

=for html <a name="get_account_sync_start"></a>

=head2 static get_account_sync_start(Bivio::Agent::Request req) : string

Returns the date the account sync subscription started. Dies otherwise.

=cut

sub get_account_sync_start {
    my($proto, $req) = @_;
    my($date) = _get_account_sync_start($req);
    Bivio::Die->die("not subscribed to account sync") unless $date;
    return $date;
}

=for html <a name="get_value"></a>

=head2 get_value(string date) : string

Returns the account's balance on the specified date.

=cut

sub get_value {
    my($self, $date) = @_;

    Carp::croak('missing date parameter') unless $date;

    my($sth) = Bivio::SQL::Connection->execute('
	    SELECT SUM(entry_t.amount)
            FROM realm_transaction_t, entry_t, realm_account_entry_t
            WHERE realm_transaction_t.realm_transaction_id
                = entry_t.realm_transaction_id
            AND entry_t.entry_id = realm_account_entry_t.entry_id
            AND realm_transaction_t.realm_id=?
            AND realm_account_entry_t.realm_account_id=?
            AND realm_transaction_t.date_time <= '
	    .Bivio::Type::DateTime->to_sql_value('?'),
	    [$self->get_request->get('auth_id'),
		    $self->get('realm_account_id'),
		    Bivio::Type::DateTime->to_sql_param($date)]);

    return $sth->fetchrow_arrayref()->[0] || '0';
}

=for html <a name="has_transactions"></a>

=head2 has_transactions() : boolean

Returns 1 if the account has transactions within the realm.

=cut

sub has_transactions {
    my($self) = @_;

    my($sth) = Bivio::SQL::Connection->execute('
            SELECT COUNT(*)
            FROM realm_account_entry_t
            WHERE realm_id=?
            AND realm_account_id=?',
	    [$self->get('realm_id', 'realm_account_id')]);
    my($count) = 0;
    while (my $row = $sth->fetchrow_arrayref) {
	$count = $row->[0] || 0;
    }
    return $count ? 1 : 0;
}

=for html <a name="in_valuation"></a>

=head2 in_valuation() : boolean

Returns true is the current account is in the club's valuation.

=cut

sub in_valuation {
    my($self) = @_;
    return $self->get('in_valuation');
}

=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : hash_ref

B<FOR INTERNAL USE ONLY>

=cut

sub internal_initialize {
    return {
	version => 1,
	table_name => 'realm_account_t',
	columns => {
            realm_account_id => ['PrimaryId', 'PRIMARY_KEY'],
            realm_id => ['RealmOwner.realm_id', 'NOT_NULL'],
            name => ['Line', 'NOT_NULL'],
            tax_free => ['Boolean', 'NOT_NULL'],
            in_valuation => ['Boolean', 'NOT_NULL'],
            institution => ['Institution', 'NOT_NULL'],
            account_number => ['ExternalAccount', 'NONE'],
            external_password => ['ExternalPassword', 'NONE'],
        },
	auth_id => 'realm_id',
    };
}

=for html <a name="unsafe_load_default"></a>

=head2 unsafe_load_default() : boolean

Loads the default account, using the DEFAULT_ACCOUNT club preference. Returns
true if successfully, loaded, false otherwise.

=cut

sub unsafe_load_default {
    my($self) = @_;

    my($default_id) = Bivio::Biz::Model::Preferences->get_club_pref(
	    $self->get_request, 'DEFAULT_ACCOUNT');

    return ($default_id && $self->unsafe_load(realm_account_id => $default_id))
	    ? 1 : 0;
}

=for html <a name="using_account_sync"></a>

=head2 static using_account_sync(Bivio::Agent::Request req) : boolean

Returns true if the club is currently subscribed to account sync.

=cut

sub using_account_sync {
    my($proto, $req) = @_;
    return defined(_get_account_sync_start($req)) ? 1 : 0;
}

#=PRIVATE METHODS

# _get_account_sync_start(Bivio::Agent::Request req) : string
#
# Returns the subscription start or undef.
#
sub _get_account_sync_start {
    my($req) = @_;
    my($subscriptions) = Bivio::Biz::Model->new($req, 'ECSubscriptionList')
	    ->load_all;

    while ($subscriptions->next_row) {
	my($type) = $subscriptions->get('ECSubscription.subscription_type');
	next unless $type == $type->ACCOUNT_SYNC
		|| $type == $type->ACCOUNT_KEEPER;

	return $subscriptions->get('ECSubscription.start_date')
		if $subscriptions->get_model('ECSubscription')->is_running;
    }
    return undef;
}

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
