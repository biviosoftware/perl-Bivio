# Copyright (c) 2008 bivio Software, Inc.  All Rights Reserved.
# $Id$
my($_R) = b_use('Biz.Random');
my($ctid, $who, $body);
FormModel({
    setup_request => sub {
	my(undef, $params) = @_;
	req()->put(query => {
	    $ctid ? (this => $ctid) : (),
	    $who ? (to => $who) : (),
	});
	return;
    },
});
req()->set_realm_and_user(qw(crm_forum crm_tech1))
    ->initialize_fully('FORUM_CRM_FORM');
my($crm_alias) = EmailArray(remote_email('crm'));
my($cal) = model('CRMActionList')->load_all;
my($board) = remote_email('board*crm_forum');
my($demo) = EmailArray(email('demo'));
[
    empty_case({
	action_id => $cal->id_to_name(-CRMThreadStatus('OPEN')->as_int),
	to => undef,
	cc => $crm_alias,
    }),
    [{
	to => $demo,
	cc => $crm_alias,
	subject => 's1',
	body => 'b1',
	action_id => $cal->id_to_name(-CRMThreadStatus('NEW')->as_int),
    }] => [{
	'Model.CRMThread' => {
	    thread_root_id => sub {
		return $ctid = req(qw(Model.CRMThread thread_root_id));
	    },
	    crm_thread_status => CRMThreadStatus('NEW'),
	},
	'Model.RealmMail' => {
	    from_email => email('crm_tech1'),
	},
    }],
    inline_case(sub {$who = 'ALL'}),
    empty_case({
	to => $demo,
	cc => $crm_alias,
	action_id => $cal->id_to_name(-CRMThreadStatus('CLOSED')->as_int),
    }),
    inline_case(sub {$who = 'REALM'}),
    empty_case({
	to => $crm_alias,
	cc => EmailArray([]),
	action_id => $cal->id_to_name(-CRMThreadStatus('LOCKED')->as_int),
    }),
    [{
	action_id => $cal->id_to_name(-CRMThreadStatus('CLOSED')->as_int),
	to => EmailArray([$board]),
	subject => 's2',
	body => sub {$body = $_R->string},
    }] => [{
	'Model.CRMThread' => {
	    crm_thread_status => CRMThreadStatus('CLOSED'),
	    modified_by_user_id => realm_id('crm_tech1'),
	},
    }],
    inline_case(sub {
	my($count) = 0;
	my($mtl) = model('MailThreadList')->do_iterate(sub {
	    my($it) = @_;
	    $count++;
	    b_die('too many messages')
		if $count > 3;
	    next
		if $count < 2;
	    assert_equals(
		$it->get('RealmMail.from_email'),
		$crm_alias->get_element(0),
	    );
	    assert_equals(
		$it->get('RealmMail.from_display_name'),
		'crm_tech1',
	    );
	    my($content) = model(RealmFile => {
		realm_file_id => $it->get('RealmMail.realm_file_id'),
	    })->get_content;
	    if ($count == 2) {
		assert_equals(qr{\QTo: $board\E}, $content);
		assert_equals(qr{$body}, $content);
	    }
	    elsif ($count == 3) {
		assert_equals(qr{\QTo: $board\E}, $content);
		assert_equals(qr{Status: Closed\s+Owner: none\s+Status changed from Locked to Closed\s*$}s, $content);
	    }
	    return 1;
	}, 'unauth_iterate_start', {
	    parent_id => $ctid,
	});
    }),
    empty_case({
	to => $crm_alias,
	action_id => $cal->id_to_name(-CRMThreadStatus('CLOSED')->as_int),
    }),
    [{
	action_id => $cal->id_to_name(-CRMThreadStatus('OPEN')->as_int),
	cc => [''],
	subject => 'new subj1',
	update_only => 1,
    }] => [{
	'Model.CRMThread' => {
	    crm_thread_status => CRMThreadStatus('OPEN'),
	    subject => 'new subj1',
	    modified_by_user_id => realm_id('crm_tech1'),
	},
    }],
    inline_case(sub {$who = 'ALL'}),
    empty_case({
	to => $demo,
	cc => $crm_alias,
	action_id => $cal->id_to_name(-CRMThreadStatus('CLOSED')->as_int),
    }),
    inline_case(sub {$ctid = $who = undef}),
    [{
	to => $crm_alias,
	subject => 's2',
	body => 'b2',
	action_id => $cal->id_to_name(req('auth_user_id')),
    }] => [{
	'Model.CRMThread' => {
	    owner_user_id => req('auth_user_id'),
	    crm_thread_status => CRMThreadStatus('OPEN'),
	    thread_root_id =>
		sub {$ctid = req(qw(Model.CRMThread thread_root_id))},
	},
    }],
    empty_case({
        action_id => $cal->id_to_name(req('auth_user_id')),
    }),
];
