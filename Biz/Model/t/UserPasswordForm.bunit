# Copyright (c) 2007-2023 bivio Software, Inc.  All Rights Reserved.
FormModel();
my($_F) = b_use('IO.File');
my($corpus_path) = $_F->temp_file(req());
$_F->write($corpus_path, <<'EOF');
weakpassword
EOF
config({
    'Bivio::Type::NewPassword' => {
        weak_regex => 'bivio',
        weak_corpus => $corpus_path,
    },
});
my($uid);
# Need at least 8 digits to trigger WEAK_PASSWORD on user id
do {
    $uid = Util_TestUser()->create(random_realm_name(8));
} while $uid < 10000000;
commit();
req()->set_realm_and_user($uid, $uid);
[
    inline_case(sub {Util_RealmAdmin()->reset_password('pass')}),
    error_case({
        old_password => 'pass',
        new_password => 'password',
        confirm_new_password => 'password',
    } => {
        old_password => 'TOO_SHORT',
    }),
    # Confirm we can reset deprecated 6-7 char passwords
    inline_case(sub {Util_RealmAdmin()->reset_password('passwd')}),
    simple_case({
        old_password => 'passwd',
        new_password => 'password',
        confirm_new_password => 'password',
    } => {
        new_password => 'password',
        confirm_new_password => 'password',
    }),
    simple_case({
        old_password => 'password',
        new_password => 'password',
        confirm_new_password => 'password',
    } => {
        new_password => 'password',
        confirm_new_password => 'password',
    }),
    error_case({
        old_password => '',
        new_password => 'password',
        confirm_new_password => 'password',
    } => {
        old_password => 'NULL',
    }),
    error_case({
        old_password => 'password',
        new_password => 'pass',
        confirm_new_password => 'pass',
    } => {
        new_password => 'TOO_SHORT',
    }),
    # Confirm deprecated 6-7 char passwords are no longer allowed for new passwords
    error_case({
        old_password => 'password',
        new_password => 'passwd',
        confirm_new_password => 'passwd',
    } => {
        new_password => 'TOO_SHORT',
    }),
    error_case({
        old_password => 'badbad',
        new_password => 'password',
        confirm_new_password => 'password',
    } => {
        old_password => 'PASSWORD_MISMATCH',
    }),
    error_case({
        old_password => 'password',
        new_password => 'password',
        confirm_new_password => 'password2',
    } => {
        confirm_new_password => 'CONFIRM_PASSWORD',
    }),
    error_case({
        old_password => 'password',
        new_password => req('auth_id'),
        confirm_new_password => req('auth_id'),
    } => {
        new_password => 'WEAK_PASSWORD',
    }),
    error_case({
        old_password => 'password',
        new_password => req(qw(auth_realm owner_name)),
        confirm_new_password => req(qw(auth_realm owner_name)),
    } => {
        new_password => 'WEAK_PASSWORD',
    }),
    error_case({
        old_password => 'password',
        new_password => email(req(qw(auth_realm owner_name))),
        confirm_new_password => email(req(qw(auth_realm owner_name))),
    } => {
        new_password => 'WEAK_PASSWORD',
    }),
    error_case({
        old_password => 'password',
        new_password => 'foobivio',
        confirm_new_password => 'foobivio',
    } => {
        new_password => 'WEAK_PASSWORD',
    }),
    error_case({
        old_password => 'password',
        new_password => 'weakpassword',
        confirm_new_password => 'weakpassword',
    } => {
        new_password => 'WEAK_PASSWORD',
    }),
    inline_case(sub {
        req()->set_user('root');
        model('UserLoginForm')->substitute_user(
            model('RealmOwner', {realm_id => $uid}),
            req(),
        ),
    }),
    simple_case({
        old_password => 'anything',
        new_password => 'password',
        confirm_new_password => 'password',
    } => {
        new_password => 'password',
        confirm_new_password => 'password',
    }),
];
