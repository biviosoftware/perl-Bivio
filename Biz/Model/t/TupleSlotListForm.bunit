# Copyright (c) 2006 bivio Software, Inc.  All Rights Reserved.
# $Id$
my($tdid);
FormModel({
    setup_request => sub {
	my($case) = @_;
	my($p) = $case->get('params');
	my($tn) = model('Tuple')->create({
	    tuple_def_id => $tdid,
	    slot1 => 'a@a.a',
	    slot2 => @$p ? shift(@$p) : 's1',
	})->get('tuple_num')
	    if !@$p || !ref($p->[0]);
	req()->put(query => {
	    parent_id => $tdid,
	    $tn ? (this => $tn) : (),
	});
	return;
    },
});
req()->set_realm_and_user(qw(fourem btest_read));
$tdid = model(TupleUseList => {auth_id => req('auth_id')})
    ->moniker_to_id('PSR');
model('Tuple')->delete_all;
[
    [{
	comment => 'hello1',
        slot_0 => 'a@a.a',
    }] => [{
	'Model.TupleSlotListForm' => {
	    slot_headers => "Author: a\@a.a\nStatus: s1\n",
	    'RealmMail.from_email' => 'btest_read@bivio.biz',
	    'RealmMail.subject' => 'PSR# - s1',
	},
    }],
    # Next two are empty_cases; see setup_request above
    simple_case(s1 => {
	slot_0 => 'a@a.a',
	slot_1 => 's1',
	comment => undef,
    }),
    simple_case('' => {
	slot_0 => 'a@a.a',
	slot_1 => '',
	comment => undef,
    }),
    [s1 => {
	comment => 'hello2',
	slot_0 => 'a@a.a',
	slot_1 => 's2',
    }] => [{
	'Model.TupleSlotListForm' => {
	    slot_headers => "Status: s2\n",
	    'RealmMail.from_email' => 'btest_read@bivio.biz',
	    'RealmMail.subject' => 'PSR#3 - s2',
	 },
    }],
    [s2 => {
	comment => 'hello3',
	slot_0 => 'b@a.a',
	slot_1 => '',
    }] => [{
	'Model.TupleSlotListForm' => {
	    slot_headers => "Author: b\@a.a\nStatus: \n",
	    'RealmMail.from_email' => 'btest_read@bivio.biz',
	    'RealmMail.subject' => 'PSR#4 - ',
	 },
    }],
    [s3 => {
	comment => 'hello4',
	slot_0 => 'c@a.a',
	slot_1 => 's0',
    }] => [{
	'Model.TupleSlotListForm' => {
	    slot_headers => "Author: c\@a.a\nStatus: s0\n",
	    'RealmMail.from_email' => 'btest_read@bivio.biz',
	    'RealmMail.subject' => 'PSR#5 - s0',
	 },
    }],
];
