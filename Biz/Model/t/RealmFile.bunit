# Copyright (c) 2005 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request('initialize_fully');
set_realm_and_user('root', 'root');
my($vt) = class()->get_instance->get_field_type('volume')->from_int(1);
my($h) = {volume => $vt, path => 'hello'};
my($h2) = {path => 'hello2', volume => $vt};
my($commit) = sub {commit(); return 1};
[
    [req()] => [
	delete_all => $commit,
        create_with_content => [
	    [$h, \('hello')] => $commit,
	],
	unsafe_load => [
	    [$h] => 1,
	],
	get_content_length => 5,
	get_content => [
	    [] => [\('hello')],
	],
	update_with_content => [
	    [$h, \('goodbye')] => $commit,
	],
	get_content => [
	    [] => [\('goodbye')],
	],
	delete => $commit,
	unsafe_load => [
	    [$h] => 0,
	],
        create_with_content => [
	    [$h, \('hello')] => $commit,
	    [$h2, \('hello2')] => $commit,
	    [$h2, \('hello2')] => DB_CONSTRAINT(),
	],
	unsafe_load => [
	    [$h] => 1,
	    [$h2] => 1,
	],
	delete_all => sub {commit(); return [3]},
	unsafe_load => [
	    [$h] => 0,
	    [$h2] => 0,
	],
        create_with_content => [
	    [$h, \('hello')] => $commit,
	],
#broken until I figure out how to get -T working with IO::File
#	get_content_type => 'text/plain',
	get_handle => sub {
	    my($case, $actual) = @_;
	    return $actual->[0]->getline eq 'hello' ? 1 : 0;
	},
	create_folder => [
	    [{
		path => 'subdir',
		volume => $vt,
	    }] => $commit,
	],
	load => [
	    [$h] => not_die(),
	],
	update => [
	    [{
		path => 'subdir/Foo',
	    }] => $commit,
	],
	load => [
	    [{path_lc => 'subdir/foo'}] => not_die(),
	],
	get_content => [
	    [] => [\('hello')],
	],
        create_with_content => [
	    [{
		path => '/newdir/subSubdir/Hello',
		volume => $vt,
	    }, \('subsubhello')] => $commit,
	],
	load => [
	    [{
		path => '/newdir/subSubdir/Hello',
		volume => $vt,
	    }] => not_die(),
	],
	get_content => [
	   [] => [\('subsubhello')],
	],
	create_folder => [
	    [{
		path => '/newdir/subsubdir/subsubsubdir',
		volume => $vt,
	    }] => $commit,
	],
	load => [
	    [{path => 'NewDir'}] => not_die(),
	],
	map_folder => [
	    [sub {
		 return shift->get('path');
	    }] => [[
		'/newdir/subSubdir',
	    ]],
	],
	update => [
	    [{path => '/RealmFile.bunit'}] => $commit,

	],
	map_folder_deep => [
	    [sub {
		 return shift->get('path');
	    }] => [[qw(
                /RealmFile.bunit/subSubdir
                /RealmFile.bunit/subSubdir/Hello
                /RealmFile.bunit/subSubdir/subsubsubdir
	    )]],
	],
	copy_deep => [
	    [{path => '/newdir-copy'}] => $commit,
	],
	load => [
	    [{path => '/newdir-copy'}] => not_die(),
	],
	map_folder_deep => [
	    [sub {
		 return shift->get('path');
	    }] => [[qw(
                /newdir-copy/subSubdir
                /newdir-copy/subSubdir/Hello
                /newdir-copy/subSubdir/subsubsubdir
	    )]],
	],
	load => [
	    [{
		path => '/realmfile.bunit/subsubdir/hello',
		volume => $vt,
	    }] => not_die(),
	],
	get_content => [
	    [] => [\('subsubhello')],
	],
	copy_deep => [
	    [{path => '/subsubhello-copy'}] => $commit,
	],
	load => [
	    [{path => '/subsubhello-copy'}] => not_die(),
	],
	get_content => [
	    [] => [\('subsubhello')],
	],
	copy_deep => [
	    [{path => '/subsubhello-copy'}] => DB_CONSTRAINT(),
	],
	delete_deep => $commit,
	load => [
	    [{path => '/subsubhello-copy'}] => MODEL_NOT_FOUND(),
	],
	load => [
	    [{path => '/newdir-copy'}] => not_die(),
	],
	delete_deep => $commit,
    ],
    class() => [
	delete_all => [
	    [{volume => $vt}] => DIE(),
	    [{realm_id => req()->get('auth_id')}] => 7,
	],
    ],
];
