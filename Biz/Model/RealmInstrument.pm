# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::Model::RealmInstrument;
use strict;
$Bivio::Biz::Model::RealmInstrument::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Biz::Model::RealmInstrument - interface to realm_instrument_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::Model::RealmInstrument;

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::Model::RealmInstrument::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::Model::RealmInstrument> is the create, read, update,
and delete interface to the C<realm_instrument_t> table.

=cut

#=IMPORTS
use Bivio::Biz::Model::Instrument;
use Bivio::SQL::Connection;
use Bivio::SQL::Constraint;
use Bivio::Type::Boolean;
use Bivio::Type::DateTime;
use Bivio::Type::EntryType;
use Bivio::Type::InstrumentType;
use Bivio::Type::Line;
use Bivio::Type::Name;
use Bivio::Type::PrimaryId;
use Bivio::Type::Text;
use Bivio::Type::TaxCategory;

#=VARIABLES
my($_PACKAGE) = __PACKAGE__;

=head1 METHODS

=cut

=for html <a name="cascade_delete"></a>

=head2 cascade_delete()

Deletes this realm instrument and any valuations associated with it.
This method will die if the instrument has any accounting transactions.

=cut

sub cascade_delete {
    my($self) = @_;

    # delete any valuations
    Bivio::SQL::Connection->execute('
            DELETE FROM realm_instrument_valuation_t
            WHERE realm_id=?
            AND realm_instrument_id=?',
	    [$self->get('realm_id', 'realm_instrument_id')]);

    $self->delete();
    return;
}

=for html <a name="create"></a>

=head2 create(hash_ref new_values)

Sets I<average_cost_method> and I<drp_plan> if not set, then calls SUPER.

=cut

sub create {
    my($self, $values) = @_;
    $values->{average_cost_method} = 0
	    unless exists($values->{average_cost_method});
    $values->{drp_plan} = 0 unless exists($values->{drp_plan});

    # don't allow club-local fields if refers to an instrument
    die("contains club-local field and an instrument_id")
	    if (exists($values->{instrument_id})
		    && ($values->{fed_tax_free} || $values->{instrument_type}
			    || defined($values->{name})
			    || defined($values->{ticker_symbol})
			    || defined($values->{exchange_name})));

    # Make sure these two are in upper case
    foreach my $f (qw(ticker_symbol exchange_name)) {
	$values->{$f} = uc($values->{$f}) if defined($values->{$f});
    }
    return $self->SUPER::create($values);
}

=for html <a name="get_name"></a>

=head2 get_name() : string

Returns the local name, or the instrument name depending on whether this
is a realm-local instrument.

=cut

sub get_name {
    my($self) = @_;

    return defined($self->get('instrument_id'))
	    ? $self->get_model('Instrument')->get('name')
	    : $self->get('name');
}

=for html <a name="has_transactions"></a>

=head2 has_transactions() : boolean

Returns 1 if the instrument has accounting transactions within the realm.

=cut

sub has_transactions {
    my($self) = @_;

    my($sth) = Bivio::SQL::Connection->execute('
            SELECT COUNT(*)
            FROM realm_instrument_entry_t
            WHERE realm_id=?
            AND realm_instrument_id=?',
	    [$self->get('realm_id', 'realm_instrument_id')]);
    my($found_transactions) = 0;
    while (my $row = $sth->fetchrow_arrayref) {
	$found_transactions = $row->[0];
    }
    return $found_transactions > 0;
}

=for html <a name="set_instrument_id"></a>

=head2 set_instrument_id(string instrument_id)

Sets the instrument id and clears all local instrument fields for the
current model.

=cut

sub set_instrument_id {
    my($self, $instrument_id) = @_;
    die("missing instrument_id") unless defined($instrument_id);

    $self->update({
	instrument_id => $instrument_id,
	name => undef,
	ticker_symbol => undef,
	exchange_name => undef,
	instrument_type => undef,
	fed_tax_free => undef,
    });
    return;
}

=for html <a name="unsafe_find_or_create"></a>

=head2 unsafe_find_or_create(string ticker) : boolean

Attempts to find a realm instrument with the specified ticker. If
no realm instrument exists, then a new one is created.
On success, 1 is returned.
If no instrument exists for the ticker, then 0 is returned.

=cut

sub unsafe_find_or_create {
    my($self, $ticker) = @_;
    my($req) = $self->get_request;
    $ticker = uc($ticker);

    # guard against multiple realm instruments with same ticker
    return -1 if _get_count($req, 'ticker_symbol', $ticker) > 1;

    # check local instrument first
    if ($self->unsafe_load(ticker_symbol => $ticker)) {
	return 1;
    }

    # load the instrument from the ticker
    my($inst) = Bivio::Biz::Model::Instrument->new($req);
    unless ($inst->unsafe_load(ticker_symbol => $ticker)) {
	return 0;
    }
    my($inst_id) = $inst->get('instrument_id');

    # guard agains multiple realm instruments with same instrument_id
    return -1 if _get_count($req, 'instrument_id', $inst_id) > 1;

    # see if there is a realm instrument for it
    unless ($self->unsafe_load(instrument_id => $inst_id)) {
	# need to create it
	$self->create({
	    instrument_id => $inst->get('instrument_id'),
	    realm_id => $req->get('auth_id'),
	});
    }
    return 1;
}

=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : hash_ref

B<FOR INTERNAL USE ONLY>

=cut

sub internal_initialize {
    return {
	version => 1,
	table_name => 'realm_instrument_t',
	columns => {
            realm_instrument_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::PRIMARY_KEY()],
            instrument_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::NOT_NULL()],
            realm_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::NOT_NULL()],
            account_number => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            average_cost_method => ['Bivio::Type::Boolean',
    		Bivio::SQL::Constraint::NOT_NULL()],
            drp_plan => ['Bivio::Type::Boolean',
    		Bivio::SQL::Constraint::NOT_NULL()],
            remark => ['Bivio::Type::Text',
    		Bivio::SQL::Constraint::NONE()],
            name => ['Bivio::Type::Line',
    		Bivio::SQL::Constraint::NONE()],
            ticker_symbol => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            exchange_name => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            instrument_type => ['Bivio::Type::InstrumentType',
    		Bivio::SQL::Constraint::NONE()],
            fed_tax_free => ['Bivio::Type::Boolean',
    		Bivio::SQL::Constraint::NONE()],
        },
	other => [
	    [qw(instrument_id Instrument.instrument_id)],
	],
	auth_id => 'realm_id',
    };
}

#=PRIVATE METHODS

# _get_count(Bivio::Agent::Request req, string field, string value) : int
#
# Returns the number of RealmInstruments where the specified field
# has the specified value.
#
sub _get_count {
    my($req, $field, $value) = @_;
    my($sth) = Bivio::SQL::Connection->execute("
            SELECT COUNT(*)
            FROM realm_instrument_t
            WHERE $field=?
            AND realm_id=?",
	    [$value, $req->get('auth_id')]);
    my($count) = 0;
    while (my $row = $sth->fetchrow_arrayref) {
	$count = $row->[0];
    }
    return $count;
}

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
