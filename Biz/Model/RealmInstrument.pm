# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::Model::RealmInstrument;
use strict;
$Bivio::Biz::Model::RealmInstrument::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Biz::Model::RealmInstrument - interface to realm_instrument_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::Model::RealmInstrument;

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::Model::RealmInstrument::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::Model::RealmInstrument> is the create, read, update,
and delete interface to the C<realm_instrument_t> table.

=cut

#=IMPORTS
use Bivio::SQL::Connection;
use Bivio::SQL::Constraint;
use Bivio::Type::Boolean;
use Bivio::Type::DateTime;
use Bivio::Type::Line;
use Bivio::Type::Name;
use Bivio::Type::PrimaryId;
use Bivio::Type::Text;

#=VARIABLES
my($_PACKAGE) = __PACKAGE__;

=head1 METHODS

=cut

=for html <a name="get_cost_per_share"></a>

=head2 static get_cost_per_share(string realm_instrument_id, Bivio::Type::Date date) : string

Returns the average cost per share for the specified instrument up to
the specified date.

=cut

sub get_cost_per_share {
#TODO: input array of instruments and use group by
    my(undef, $realm_instrument_id, $date) = @_;

    my($sth) = Bivio::SQL::Connection->execute(
	    'select entry_t.amount, realm_instrument_entry_t.count from realm_transaction_t, entry_t, realm_instrument_entry_t where realm_transaction_t.realm_transaction_id = entry_t.realm_transaction_id and entry_t.entry_id = realm_instrument_entry_t.entry_id and entry_t.tax_basis = 1 and realm_instrument_entry_t.realm_instrument_id=? and realm_transaction_t.dttm <= '
	    .Bivio::Type::Date->to_sql_value('?'),
	   [$realm_instrument_id,
		   Bivio::Type::Date->to_sql_param($date)]);

    my($total_cost) = 0.0;
    my($total_count) = 0;
    my($row);
    while ($row = $sth->fetchrow_arrayref()) {
	$total_cost += $row->[0];
	$total_count += $row->[1];
    }
    return $total_count == 0 ? 0
	    : $total_cost / $total_count;
}

=for html <a name="get_first_buy_date"></a>

=head2 static get_first_buy_date(string realm_instrument_id) : string

Returns the date of the first buy or valuation of the specified
instrument.

=cut

sub get_first_buy_date {
#TODO: input array of instruments and use group by
    my(undef, $realm_instrument_id) = @_;

    my($sth) = Bivio::SQL::Connection->execute(
	    'select '.Bivio::Type::Date->from_sql_value(
		    'min(realm_transaction_t.dttm)')
	    .' from realm_transaction_t, entry_t, realm_instrument_entry_t where realm_transaction_t.realm_transaction_id = entry_t.realm_transaction_id and entry_t.entry_id = realm_instrument_entry_t.entry_id and entry_t.entry_type = 200 and realm_instrument_entry_t.realm_instrument_id=?',
	    [$realm_instrument_id]);

    my($date);
    my($row);
    if ($row = $sth->fetchrow_arrayref()) {
	$date = Bivio::Type::Date->from_sql_column($row->[0]);
    }

    $sth = Bivio::SQL::Connection->execute(
	    'select '.Bivio::Type::Date->from_sql_value(
		    'min(realm_instrument_valuation_t.dttm)')
	    .' from realm_instrument_valuation_t where realm_instrument_valuation_t.realm_instrument_id=?',
	   [$realm_instrument_id]);

    if ($row = $sth->fetchrow_arrayref()) {
	my($date2) = Bivio::Type::Date->from_sql_column($row->[0]);

	if (!defined($date) ||
		Bivio::Type::Date->compare($date, $date2) > 0) {
	    $date = $date2;
	}
    }
    return $date;
}

=for html <a name="get_next_block"></a>

=head2 get_next_block() : string

Returns the next block identifier.

=cut

sub get_next_block {
    my($self) = @_;
    my($fields) = $self->{$_PACKAGE};
    die("not implemented");
    return;
}

=for html <a name="get_number_of_shares"></a>

=head2 static get_number_of_shares(string realm_instrument_id, string date) : int

Returns the number of shares of the specified realm instrument that are
owned by on the specified date.

=cut

sub get_number_of_shares {
#TODO: input array of instruments and use group by
    my(undef, $realm_instrument_id, $date) = @_;

    # note: doesn't include fractional shares paid in cash (not tax basis)

    my($sth) = Bivio::SQL::Connection->execute(
	    'select sum(realm_instrument_entry_t.count) from realm_transaction_t, entry_t, realm_instrument_entry_t where realm_transaction_t.realm_transaction_id = entry_t.realm_transaction_id and entry_t.entry_id = realm_instrument_entry_t.entry_id and entry_t.tax_basis = 1 and realm_instrument_entry_t.realm_instrument_id=? and realm_transaction_t.dttm <= '
	    .Bivio::Type::Date->to_sql_value('?'),
	   [$realm_instrument_id,
		   Bivio::Type::Date->to_sql_param($date)]);
    return $sth->fetchrow_arrayref()->[0] || '0';
}

=for html <a name="get_share_price"></a>

=head2 static get_share_price(string realm_instrument_id, string date) : string

Returns the value of one share of the specified instrument on the specified
date.

=cut

sub get_share_price {
#TODO: input array of instruments and use group by
    my(undef, $realm_instrument_id, $date) = @_;

    my($sth) = Bivio::SQL::Connection->execute(
	    'select realm_instrument_valuation_t.price_per_share, '
	    .Bivio::Type::Date->from_sql_value(
		    'realm_instrument_valuation_t.dttm')
	    .' from realm_instrument_valuation_t where realm_instrument_valuation_t.realm_instrument_id=? and realm_instrument_valuation_t.dttm <= '
	    .Bivio::Type::Date->to_sql_value('?')
	    .' order by realm_instrument_valuation_t.dttm desc',
	   [$realm_instrument_id,
		   Bivio::Type::Date->to_sql_param($date)]);

    my($row);
    if ($row = $sth->fetchrow_arrayref()) {
	my ($value, $date) = @$row;
	$date = Bivio::Type::Date->from_sql_column($date);
	$sth->finish();
	return ($value, $date);
    }
    return (0.0, Bivio::Type::Date->get_min);
}

=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : hash_ref

B<FOR INTERNAL USE ONLY>

=cut

sub internal_initialize {
    return {
	version => 1,
	table_name => 'realm_instrument_t',
	columns => {
            realm_instrument_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::PRIMARY_KEY()],
            instrument_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::NOT_NULL()],
            realm_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::NOT_NULL()],
            account_number => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            average_cost_method => ['Bivio::Type::Boolean',
    		Bivio::SQL::Constraint::NOT_NULL()],
            drp_plan => ['Bivio::Type::Boolean',
    		Bivio::SQL::Constraint::NOT_NULL()],
            remark => ['Bivio::Type::Text',
    		Bivio::SQL::Constraint::NONE()],
        },
	other => [
#	    [qw(realm_id RealmOwner.realm_id)],
	    [qw(instrument_id Instrument.instrument_id)],
	],
	auth_id => 'realm_id',
    };
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
