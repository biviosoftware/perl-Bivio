# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::PropertyModel::User;
use strict;
$Bivio::Biz::PropertyModel::User::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Biz::PropertyModel::User - interface to user_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::PropertyModel::User;
    Bivio::Biz::PropertyModel::User->new($req);

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::PropertyModel::User::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::PropertyModel::User> is the create, read, update,
and delete interface to the C<user_t> table.

=cut

#=IMPORTS
use Bivio::SQL::Constraint;
use Bivio::Type::Enum;
use Bivio::Type::Gender;
use Bivio::Type::Name;
use Bivio::Type::PrimaryId;

#=VARIABLES

=head1 METHODS

=cut

=for html <a name="get_email_addresses"></a>

=head2 get_email_addresses() : array

Returns an array of email addresses for this user.

=cut

sub get_email_addresses {
    my($self) = @_;
    # a 4 table join
    my($sql) = 'select email '
	    .'from user_email_t '
	    .'where user_id=? ';
    my($statement) = Bivio::SQL::Connection->execute(
	    $sql, [$self->get('user_id')], $self);
    my($result) = [];
    my($row);
    while($row = $statement->fetchrow_arrayref()) {
	push(@$result, $row->[0]);
    }
#TODO: Do we need statement->finish here?
#    $statement->finish();
    return $result;
}

=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : hash_ref

B<FOR INTERNAL USE ONLY>

=cut

sub internal_initialize {
    return {
	version => 1,
	table_name => 'user_t',
	columns => {
            user_id => ['Bivio::Type::PrimaryId',
    		Bivio::SQL::Constraint::PRIMARY_KEY()],
            first_name => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            middle_name => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            last_name => ['Bivio::Type::Name',
    		Bivio::SQL::Constraint::NONE()],
            gender => ['Bivio::Type::Gender',
    		Bivio::SQL::Constraint::NOT_NULL()],
            age => ['Bivio::Type::Integer',
    		Bivio::SQL::Constraint::NONE()],
    
        },
    };
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
