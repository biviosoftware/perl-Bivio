# Copyright (c) 1999 bivio, LLC.  All rights reserved.
# $Id$
# Generated by ../generate.PL on Wed Aug 18  7:57:50 1999
# from tables.sql,v 1.13 1999/08/13 17:06:21 moeller Exp 
package Bivio::Biz::PropertyModel::Club;
use strict;
$Bivio::Biz::PropertyModel::Club::VERSION = sprintf('%d.%02d', q$Revision$ =~ /\d+/g);

=head1 NAME

Bivio::Biz::PropertyModel::Club - interface to club_t SQL table

=head1 SYNOPSIS

    use Bivio::Biz::PropertyModel::Club;
    Bivio::Biz::PropertyModel::Club->new($req);

=cut

=head1 EXTENDS

L<Bivio::Biz::PropertyModel>

=cut

use Bivio::Biz::PropertyModel;
@Bivio::Biz::PropertyModel::Club::ISA = qw(Bivio::Biz::PropertyModel);

=head1 DESCRIPTION

C<Bivio::Biz::PropertyModel::Club> is the create, read, update,
and delete interface to the C<club_t> table.

=cut

#=IMPORTS
use Bivio::SQL::Constraint;
use Bivio::SQL::Support;
use Bivio::Type::Integer;
use Bivio::Type::Line;
use Bivio::Type::MailMode;
use Bivio::Type::PrimaryId;

#=VARIABLES

=head1 METHODS

=cut

=for html <a name="get_outgoing_emails"></a>

=head2 get_outgoing_emails() : array

Returns an array of email addresses (string) for all members of the club.
If an error occurs during processing, then undef is returned.

=cut

sub get_outgoing_emails {
    my($self) = @_;
    # a 4 table join
    my($sql) = 'select user_email_t.email '
	    .' from user_email_t, club_user_t '
	    .' where club_user_t.club_id=?'
	    .' and club_user_t.mail_mode='
	    . Bivio::Type::MailMode::WANT_ALL->as_int
	    .' and club_user_t.user_id=user_email_t.user_id';
    my($statement) = Bivio::SQL::Connection->execute($sql,
	    [$self->get('club_id')], $self);

    my($result) = [];
    my($row);
    while($row = $statement->fetchrow_arrayref()) {
	push(@$result, $row->[0]);
    }
#TODO: Do we need statement->finish here?
#    $statement->finish();
    return $result;
}


=for html <a name="internal_initialize"></a>

=head2 internal_initialize() : array_ref

=cut

sub internal_initialize {
    return Bivio::SQL::Support->new('club_t', {
        club_id => ['Bivio::Type::PrimaryId',
		Bivio::SQL::Constraint::PRIMARY_KEY()],
        full_name => ['Bivio::Type::Line',
		Bivio::SQL::Constraint::NOT_NULL()],
        kbytes_in_use => ['Bivio::Type::Integer',
		Bivio::SQL::Constraint::NOT_NULL()],
        max_storage_kbytes => ['Bivio::Type::Integer',
		Bivio::SQL::Constraint::NOT_NULL()],
    });
}

#=PRIVATE METHODS

=head1 COPYRIGHT

Copyright (c) 1999 bivio, LLC.  All rights reserved.

=head1 VERSION

$Id$

=cut

1;
