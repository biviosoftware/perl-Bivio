# Copyright (c) 2004 bivio Software, Inc.  All Rights Reserved.
# $Id$
Request();
my($sendmail_out) = 'sendmail.tmp';
config({
    'Bivio::Mail::Common' => {
	sendmail => "perl -w mock-sendmail.PL $sendmail_out ",
    },
});
[
    class() => [
	{
	    method => 'send',
	    compute_return => sub {
		return [${Bivio::IO::File->read($sendmail_out)}];
	    },
	} => [
	    ['a@a.a', <<'IN', 0, 'b@b.b', req()] => <<'OUT',
s: 1

b
IN
From: b@b.b
Recipients: a@a.a
X-Bivio-Test-Recipient: a@a.a
s: 1

b
OUT
	    ['a@a.a', <<'IN', 0, undef, req()] => <<'OUT',
x
IN
Recipients: a@a.a
X-Bivio-Test-Recipient: a@a.a
x
OUT
	    ['a@a.a', <<'IN', 1, undef, req()] => <<'OUT',
zz
IN
Recipients: a@a.a
X-Bivio-Test-Recipient: a@a.a
z
OUT
	],
	'internal_get_config' => [
	    [] => sub {
		my(undef, $actual) = @_;
		$actual = shift(@$actual);
		foreach my $domain (@{$actual->{rewrite_from_domains}}) {
		    b_die($domain, ': rewrite_from_domains_re failed')
			unless (Type_Email()->join_parts(random_string(), $domain))
			    =~ $actual->{rewrite_from_domains_re};
		}
		return 1;
	    },
	],
    ],
];
