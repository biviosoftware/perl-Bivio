# Copyright (c) 2005-2006 bivio Software, Inc.  All rights reserved.
# $Id$
Request('initialize_fully');
config({
    'Bivio::Mail::Common' => {
        # read input until EOF, and ignore command line args
        sendmail => 'sh -c "cat >& /dev/null" -s > /dev/null',
    },
});
# use User::pwent ();
# my($_USER) = $ENV{LOGNAME} || $ENV{USER} || User::pwent::getpwuid($>)->name;
# Bivio::IO::Alert->warn('You will receive two identical mail messages');
my($_USER) = 'bunit@bivio.biz';

my($_IN) = <<'EOF';
Received: (from majordomo@localhost)
	by bivio.com (8.8.7/8.8.7) id HAA23244
	for example.com; Thu, 1 Jul 1999 07:43:10 -0600
Received: from lists.bivio.com)
	by foo.example.com (8.8.7/8.8.7) with SMTP id HAA23241
	for <any@bivio.com>; Thu, 1 Jul 1999 07:43:09 -0600
Message-ID: <123@example.com>
From: "Fan Tango" <foo_bar@example.net>
To: "Some-List" <some-list@example.com>, to@example.com
Date: Thu, 1 Jul 1999 09:33:35 -0400
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mimeole: Produced By Microsoft MimeOLE V4.72.3110.3
List-Unsubscribe: <mailto:leave-some-list-14220S@example.com>
CC: cc@example.com
BCC: bcc@example.com
Subject: This is my subject
Reply-To: " Some-List" <some-list@example.com>
Sender: owner-some-list@bivio.com
Return-Receipt-To: nagler@acm.org

Four score and seven years ago...

Fan Tango
$somevar
EOF


my($_OUT) = <<'EOF';
Return-Path: <foo_bar@example.net>
Message-ID: <123@example.com>
Date: Thu, 1 Jul 1999 09:33:35 -0400
From: "Fan Tango" <foo_bar@example.net>
Subject: [abc] This is my subject
Sender: some-list-owner@a.a
To: "Some-List" <some-list@example.com>, to@example.com
CC: cc@example.com
BCC: bcc@example.com
Reply-To: some-list@example.com
MIME-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
List-Id: <some-list.example.com>
Precedence: list
X-Auto-Response-Suppress: OOF
X-Bivio-Forwarded: 1
X-Mailer: Bivio-Mail-Outgoing

Four score and seven years ago...

Fan Tango
$somevar
EOF
$_OUT =~ s/(\$\{.+?\})/$1/eeg;

my($_WITH_CC) = <<'EOF';
Message-ID: <123@example.com>
From: from@google.com
Cc: cc@cc.cc
Date: Thu, 1 Jul 1999 09:33:35 -0400

body
EOF

my($_REWRITE_FROM) = <<'EOF';
Message-ID: <123@example.com>
From: rewrite_from_domain@yahoo.com
Date: Thu, 1 Jul 1999 09:33:35 -0400

body
EOF

my($_WITHOUT_CC) = <<'EOF';
Message-ID: <123@example.com>
From: from@from.from
Date: Thu, 1 Jul 1999 09:33:35 -0400

body
EOF

my($_BAD_FROM) = <<'EOF';
Message-ID: <123@example.com>
From: <<from@from.from>>
Date: Thu, 1 Jul 1999 09:33:35 -0400

body
EOF

my($_QUOTED_PRINTABLE) = <<'EOF';
Message-ID: <123@example.com>
From: <<from@from.from>>
Date: Thu, 1 Jul 1999 09:33:35 -0400
Content-Type: multipart/alternative; boundary=001a11c3e682ee25060502a42c67

--001a11c3e682ee25060502a42c67
Content-Type: text/plain; charset=UTF-8

The quick brown fox $jumps over the $lazy dog.

--001a11c3e682ee25060502a42c67
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

The quick brown fox $jum=
ps over the $=
lazy dog.

--001a11c3e682ee25060502a42c67--
EOF


my($_BODY) = 'what a body';
[
    [Bivio::Mail::Incoming->new(\$_IN)] => [
        set_headers_for_list_send => [
            [{
                req => req(),
                list_email => 'some-list@example.com',
                sender => 'some-list-owner@a.a',
                subject_prefix => '[abc] ',
                reply_to_list => 1,
            }] => undef,
        ],
        unsafe_get_recipients => [
            [] => [undef],
        ],
        set_recipients => [
            [[$_USER, 'joe@example.com'], req()] => undef,
        ],
        unsafe_get_recipients => $_USER . ',joe@example.com',
        set_recipients => [
            [$_USER, req()] => undef,
        ],
        unsafe_get_recipients => $_USER,
        unsafe_get_header => [
            'Date' => "Thu, 1 Jul 1999 09:33:35 -0400",
            'Not_Found' => [undef],
        ],
        set_header => [
            ['x-PrioritY', 33] => not_die(),
        ],
        unsafe_get_header => [
            'X-PRIority' => 33,
        ],
        remove_headers => [
            'x-priOrity' => not_die(),
        ],
        unsafe_get_header => [
            'X-PRIority' => [undef],
        ],
        format_as_bounce => [
            ['bad, bad, bad', undef, undef, undef, req()]
                => qr{ERROR.*$_USER.*bad, bad, bad.*Original}s,
        ],
        send => [
            [req()] => undef,
        ],
        enqueue_send => [
            [req()] => undef,
        ],
        inline_commit(),
        as_string => $_OUT,
        set_body => [
            [\$_BODY] => undef,
        ],
        send => [
            [req()] => undef,
        ],
        as_string => sub {
            $_OUT =~ /(^.*?\n\n)/s;
            return [$1 . $_BODY];
        },
        add_missing_headers => [
            [req()] => undef,
        ],
        as_string => qr{Return-Path: <foo_bar\@example.net>\nMessage-ID}is,
    ],
    [Bivio::Mail::Incoming->new(\$_IN)] => [
        set_headers_for_list_send => [
            [{
                req => req(),
                list_email => 'some-list@example.com',
                reply_to_list => 0,
                sender => 'a@a.a',
                reply_to => 'b@b.b',
                return_path => 'c@c.c',
            }] => undef,
        ],
        unsafe_get_header => [
            to => '"Some-List" <some-list@example.com>, to@example.com',
            cc => 'cc@example.com',
            bcc => 'bcc@example.com',
            'return-path' => '<c@c.c>',
            from => '"Fan Tango" <foo_bar@example.net>',
            sender => 'a@a.a',
            'reply-to' => undef,
        ],
        edit_body => [
            [{somevar => 'ReplacedVar'}] => not_die(),
        ],
        get_body => qr{ReplacedVar},
    ],
    [Bivio::Mail::Incoming->new(\$_WITH_CC)] => [
        set_recipients => [
            [$_USER, req()] => undef,
        ],
        set_headers_for_list_send => [
            [{
                req => req(),
                list_email => 'some-list@example.com',
            }] => undef,
        ],
        send => [
            [req()] => undef,
        ],
        unsafe_get_header => [
            to => 'cc@cc.cc',
            cc => undef,
            from => qr/ignore-from-google-com@/,
        ],
    ],
    [Bivio::Mail::Incoming->new(\$_REWRITE_FROM)] => [
        set_recipients => [
            [$_USER, req()] => undef,
        ],
        set_headers_for_list_send => [
            [{
                req => req(),
                list_email => 'some-list@example.com',
                reply_to_list => 1,
            }] => undef,
        ],
        send => [
            [req()] => undef,
        ],
        unsafe_get_header => [
            from => qr{^"rewrite_from_domain via \S+ <user\*\d+@.*>$},
            'reply-to' => 'some-list@example.com',
        ],
    ],
    [Bivio::Mail::Incoming->new(\$_REWRITE_FROM)] => [
        set_recipients => [
            [$_USER, req()] => undef,
        ],
        send => [
            [req()] => undef,
        ],
        get_from_email => qr{user\*\d+@.*$},
        unsafe_get_header => [
            'reply-to' => 'rewrite_from_domain@yahoo.com',
        ],
    ],
    [Bivio::Mail::Incoming->new(\$_WITHOUT_CC)] => [
        get_from_email => [
            [req()] => 'from@from.from',
        ],
        set_headers_for_list_send => [
            [{
                req => req(),
                list_email => 'some-list@example.com',
            }] => undef,
        ],
        unsafe_get_header => [
            to => 'some-list@example.com',
            cc => undef,
            from => 'from@from.from',
        ],
    ],
    [Bivio::Mail::Incoming->new(\$_BAD_FROM)] => [
        get_from_email => [
            [req()] => [undef],
        ],
        set_headers_for_forward => [
            [undef, req()] => undef,
        ],
        unsafe_get_header => [
            to => undef,
            cc => undef,
            from => '<<from@from.from>>',
        ],
    ],
    [Bivio::Mail::Incoming->new(\$_QUOTED_PRINTABLE)] => [
        edit_body => [
            [{
                jumps => 'hurdles',
                lazy => 'slumbering',
            }] => not_die(),
        ],
        get_body => qr{slumbering},
    ],
];
